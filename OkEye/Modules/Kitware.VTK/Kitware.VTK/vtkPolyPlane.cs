using System;
using System.Reflection;
using System.Runtime.InteropServices;
using Kitware.mummy.Runtime;

namespace Kitware.VTK;

/// <summary>
///    vtkPolyPlane
/// </summary>
/// <remarks>
///    Implicit function that is generated by extrusion of a polyline along the Z axis
///
/// vtkPolyPlane is, as the name suggests, an extrusion of a vtkPolyLine.
/// The extrusion direction is assumed to be the Z vector. It can be used in
/// combination with a vtkCutter to cut a dataset with a polyplane.
/// vtkPolyPlane is a concrete implementation of the abstract class
/// vtkImplicitFunction.
///
/// @todo
/// Generalize to extrusions along arbitrary directions.
/// </remarks>
public class vtkPolyPlane : vtkImplicitFunction
{
	/// <summary>
	/// Automatically generated type registration mechanics.
	/// </summary>
	public new const string MRFullTypeName = "Kitware.VTK.vtkPolyPlane";

	/// <summary>
	/// Automatically generated type registration mechanics.
	/// </summary>
	public new static readonly string MRClassNameKey;

	/// <summary>
	/// Automatically generated type registration mechanics.
	/// </summary>
	static vtkPolyPlane()
	{
		MRClassNameKey = "class vtkPolyPlane";
		Methods.RegisterType(Assembly.GetExecutingAssembly(), MRClassNameKey, Type.GetType("Kitware.VTK.vtkPolyPlane"));
	}

	/// <summary>
	/// Automatically generated constructor - called from generated code.
	/// DO NOT call directly.
	/// </summary>
	public vtkPolyPlane(IntPtr rawCppThis, bool callDisposalMethod, bool strong)
		: base(rawCppThis, callDisposalMethod, strong)
	{
	}

	[DllImport("Kitware.VTK.CommonDataModel.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkPolyPlane_New(ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Construct plane passing through origin and normal to z-axis.
	/// </summary>
	public new static vtkPolyPlane New()
	{
		vtkPolyPlane result = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkPolyPlane_New(ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			result = (vtkPolyPlane)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var _);
		}
		return result;
	}

	/// <summary>
	/// Construct plane passing through origin and normal to z-axis.
	/// </summary>
	public vtkPolyPlane()
		: base(IntPtr.Zero, callDisposalMethod: false, strong: false)
	{
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr rawCppThis = vtkPolyPlane_New(ref mteStatus, ref mteIndex, ref rawRefCount);
		SetCppThis(rawCppThis, callDisposalMethod: true, (mteStatus != 0 && rawRefCount >= 2) ? true : false);
	}

	/// <summary>
	/// Automatically generated protected Dispose method - called from
	/// public Dispose or the C# destructor. DO NOT call directly.
	/// </summary>
	protected override void Dispose(bool disposing)
	{
		base.Dispose(disposing);
	}

	[DllImport("Kitware.VTK.CommonDataModel.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern double vtkPolyPlane_EvaluateFunction_01(HandleRef pThis, IntPtr x);

	/// <summary>
	/// Evaluate plane equation for point x[3].
	/// </summary>
	public override double EvaluateFunction(IntPtr x)
	{
		return vtkPolyPlane_EvaluateFunction_01(GetCppThis(), x);
	}

	[DllImport("Kitware.VTK.CommonDataModel.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkPolyPlane_EvaluateGradient_02(HandleRef pThis, IntPtr x, IntPtr g);

	/// <summary>
	/// Evaluate function gradient at point x[3].
	/// </summary>
	public override void EvaluateGradient(IntPtr x, IntPtr g)
	{
		vtkPolyPlane_EvaluateGradient_02(GetCppThis(), x, g);
	}

	[DllImport("Kitware.VTK.CommonDataModel.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern ulong vtkPolyPlane_GetMTime_03(HandleRef pThis);

	/// <summary>
	/// Override GetMTime to include the polyline
	/// </summary>
	public override ulong GetMTime()
	{
		return vtkPolyPlane_GetMTime_03(GetCppThis());
	}

	[DllImport("Kitware.VTK.CommonDataModel.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern long vtkPolyPlane_GetNumberOfGenerationsFromBase_04(HandleRef pThis, string type);

	/// <summary>
	/// Construct plane passing through origin and normal to z-axis.
	/// </summary>
	public override long GetNumberOfGenerationsFromBase(string type)
	{
		return vtkPolyPlane_GetNumberOfGenerationsFromBase_04(GetCppThis(), type);
	}

	[DllImport("Kitware.VTK.CommonDataModel.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern long vtkPolyPlane_GetNumberOfGenerationsFromBaseType_05(string type);

	/// <summary>
	/// Construct plane passing through origin and normal to z-axis.
	/// </summary>
	public new static long GetNumberOfGenerationsFromBaseType(string type)
	{
		return vtkPolyPlane_GetNumberOfGenerationsFromBaseType_05(type);
	}

	[DllImport("Kitware.VTK.CommonDataModel.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkPolyPlane_GetPolyLine_06(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Set/get point through which plane passes. Plane is defined by point
	/// and normal.
	/// </summary>
	public virtual vtkPolyLine GetPolyLine()
	{
		vtkPolyLine vtkPolyLine2 = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkPolyPlane_GetPolyLine_06(GetCppThis(), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			vtkPolyLine2 = (vtkPolyLine)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var found);
			if (found)
			{
				vtkPolyLine2.Register(null);
			}
		}
		return vtkPolyLine2;
	}

	[DllImport("Kitware.VTK.CommonDataModel.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkPolyPlane_IsA_07(HandleRef pThis, string type);

	/// <summary>
	/// Construct plane passing through origin and normal to z-axis.
	/// </summary>
	public override int IsA(string type)
	{
		return vtkPolyPlane_IsA_07(GetCppThis(), type);
	}

	[DllImport("Kitware.VTK.CommonDataModel.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkPolyPlane_IsTypeOf_08(string type);

	/// <summary>
	/// Construct plane passing through origin and normal to z-axis.
	/// </summary>
	public new static int IsTypeOf(string type)
	{
		return vtkPolyPlane_IsTypeOf_08(type);
	}

	[DllImport("Kitware.VTK.CommonDataModel.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkPolyPlane_NewInstance_10(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Construct plane passing through origin and normal to z-axis.
	/// </summary>
	public new vtkPolyPlane NewInstance()
	{
		vtkPolyPlane result = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkPolyPlane_NewInstance_10(GetCppThis(), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			result = (vtkPolyPlane)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var _);
		}
		return result;
	}

	[DllImport("Kitware.VTK.CommonDataModel.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkPolyPlane_SafeDownCast_11(HandleRef o, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Construct plane passing through origin and normal to z-axis.
	/// </summary>
	public new static vtkPolyPlane SafeDownCast(vtkObjectBase o)
	{
		vtkPolyPlane vtkPolyPlane2 = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkPolyPlane_SafeDownCast_11(o?.GetCppThis() ?? default(HandleRef), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			vtkPolyPlane2 = (vtkPolyPlane)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var found);
			if (found)
			{
				vtkPolyPlane2.Register(null);
			}
		}
		return vtkPolyPlane2;
	}

	[DllImport("Kitware.VTK.CommonDataModel.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkPolyPlane_SetPolyLine_12(HandleRef pThis, HandleRef arg0);

	/// <summary>
	/// Set/get point through which plane passes. Plane is defined by point
	/// and normal.
	/// </summary>
	public virtual void SetPolyLine(vtkPolyLine arg0)
	{
		vtkPolyPlane_SetPolyLine_12(GetCppThis(), arg0?.GetCppThis() ?? default(HandleRef));
	}
}
