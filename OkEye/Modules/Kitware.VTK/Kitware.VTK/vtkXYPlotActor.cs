using System;
using System.Reflection;
using System.Runtime.InteropServices;
using Kitware.mummy.Runtime;

namespace Kitware.VTK;

/// <summary>
///    vtkXYPlotActor
/// </summary>
/// <remarks>
///    generate an x-y plot from input dataset(s) or field data
///
/// vtkXYPlotActor creates an x-y plot of data from one or more input data
/// sets or field data. The class plots dataset scalar values (y-axis) against
/// the points (x-axis). The x-axis values are generated by taking the point
/// ids, computing a cumulative arc length, or a normalized arc length. More
/// than one input data set can be specified to generate multiple plots.
/// Alternatively, if field data is supplied as input, the class plots one
/// component against another. (The user must specify which component to use
/// as the x-axis and which for the y-axis.)
///
/// To use this class to plot dataset(s), you must specify one or more
/// input datasets containing scalar and point data.  You'll probably also
/// want to invoke a method to control how the point coordinates are converted
/// into x values (by default point ids are used).
///
/// To use this class to plot field data, you must specify one or more input
/// data objects with its associated field data. You'll also want to specify
/// which component to use as the x-axis and which to use as the y-axis.
/// Note that when plotting field data, the x and y values are used directly
/// (i.e., there are no options to normalize the components).
///
/// Once you've set up the plot, you'll want to position it.  The
/// PositionCoordinate defines the lower-left location of the x-y plot
/// (specified in normalized viewport coordinates) and the Position2Coordinate
/// define the upper-right corner. (Note: the Position2Coordinate is relative
/// to PositionCoordinate, so you can move the vtkXYPlotActor around the
/// viewport by setting just the PositionCoordinate.) The combination of the
/// two position coordinates specifies a rectangle in which the plot will lie.
///
/// Optional features include the ability to specify axes labels, label
/// format and plot title. You can also
/// manually specify the x and y plot ranges (by default they are computed
/// automatically). The Border instance variable is used to create space
/// between the boundary of the plot window (specified by PositionCoordinate
/// and Position2Coordinate) and the plot itself.
///
/// The font property of the plot title can be modified through the
/// TitleTextProperty attribute.
/// The font property of the axes titles and labels can be modified through the
/// AxisTitleTextProperty and AxisLabelTextProperty attributes. You may also
/// use the GetXAxisActor2D or GetYAxisActor2D methods
/// to access each individual axis actor to modify their font properties.
/// In the same way, the GetLegendBoxActor method can be used to access
/// the legend box actor to modify its font properties.
///
/// There are several advanced features as well. You can assign per curve
/// properties (such as color and a plot symbol). (Note that each input
/// dataset and/or data object creates a single curve.) Another option is to
/// add a plot legend that graphically indicates the correspondence between
/// the curve, curve symbols, and the data source. You can also exchange the
/// x and y axes if you prefer you plot orientation that way.
///
/// @warning
/// If you are interested in plotting something other than scalar data, you
/// can use the vtk data shuffling filters (e.g.,
/// vtkAttributeDataToFieldDataFilter and vtkFieldDataToAttributeDataFilter)
/// to convert the data into scalar data and/or points.
///
/// @par Thanks:
/// This class was written by:
/// Will Schroeder, Jim Miller, Charles Law, Sebastien Barre, Amy Squillacote,
/// Ken Martin, Mathieu Malaterre, Jeff Lee, Francois Finet, Julien Bertel,
/// Claire Guilbaud, and Philippe Pebay
///
/// </remarks>
/// <seealso>
///
/// vtkActor2D vtkTextMapper vtkScalarBarActor vtkAxisActor2D vtkCubeAxesActor2D
/// vtkAttributeDataToFieldDataFilter vtkFieldDataToAttributeDataFilter
/// vtkTextProperty
/// </seealso>
public class vtkXYPlotActor : vtkActor2D
{
	/// <summary>
	/// If true, the xyplot actor will adjust the position of the title
	/// automatically to be upper-middle. Default is true.
	/// </summary>
	public enum Alignment
	{
		/// <summary>enum member</summary>
		AlignAxisBottom = 8192,
		/// <summary>enum member</summary>
		AlignAxisHCenter = 1024,
		/// <summary>enum member</summary>
		AlignAxisLeft = 256,
		/// <summary>enum member</summary>
		AlignAxisRight = 512,
		/// <summary>enum member</summary>
		AlignAxisTop = 4096,
		/// <summary>enum member</summary>
		AlignAxisVCenter = 16384,
		/// <summary>enum member</summary>
		AlignBottom = 32,
		/// <summary>enum member</summary>
		AlignHCenter = 4,
		/// <summary>enum member</summary>
		AlignLeft = 1,
		/// <summary>enum member</summary>
		AlignRight = 2,
		/// <summary>enum member</summary>
		AlignTop = 16,
		/// <summary>enum member</summary>
		AlignVCenter = 64
	}

	/// <summary>
	/// Automatically generated type registration mechanics.
	/// </summary>
	public new const string MRFullTypeName = "Kitware.VTK.vtkXYPlotActor";

	/// <summary>
	/// Automatically generated type registration mechanics.
	/// </summary>
	public new static readonly string MRClassNameKey;

	/// <summary>
	/// Automatically generated type registration mechanics.
	/// </summary>
	static vtkXYPlotActor()
	{
		MRClassNameKey = "class vtkXYPlotActor";
		Methods.RegisterType(Assembly.GetExecutingAssembly(), MRClassNameKey, Type.GetType("Kitware.VTK.vtkXYPlotActor"));
	}

	/// <summary>
	/// Automatically generated constructor - called from generated code.
	/// DO NOT call directly.
	/// </summary>
	public vtkXYPlotActor(IntPtr rawCppThis, bool callDisposalMethod, bool strong)
		: base(rawCppThis, callDisposalMethod, strong)
	{
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_New(ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Instantiate object with autorange computation; bold, italic, and shadows
	/// on; arial font family; the number of labels set to 5 for the x and y
	/// axes; a label format of "%-#6.3g"; and x coordinates computed from point
	/// ids.
	/// </summary>
	public new static vtkXYPlotActor New()
	{
		vtkXYPlotActor result = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkXYPlotActor_New(ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			result = (vtkXYPlotActor)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var _);
		}
		return result;
	}

	/// <summary>
	/// Instantiate object with autorange computation; bold, italic, and shadows
	/// on; arial font family; the number of labels set to 5 for the x and y
	/// axes; a label format of "%-#6.3g"; and x coordinates computed from point
	/// ids.
	/// </summary>
	public vtkXYPlotActor()
		: base(IntPtr.Zero, callDisposalMethod: false, strong: false)
	{
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr rawCppThis = vtkXYPlotActor_New(ref mteStatus, ref mteIndex, ref rawRefCount);
		SetCppThis(rawCppThis, callDisposalMethod: true, (mteStatus != 0 && rawRefCount >= 2) ? true : false);
	}

	/// <summary>
	/// Automatically generated protected Dispose method - called from
	/// public Dispose or the C# destructor. DO NOT call directly.
	/// </summary>
	protected override void Dispose(bool disposing)
	{
		base.Dispose(disposing);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_AddDataObjectInput_01(HandleRef pThis, HandleRef arg0);

	/// <summary>
	/// Add a data object to the list of data to display.
	/// </summary>
	public void AddDataObjectInput(vtkDataObject arg0)
	{
		vtkXYPlotActor_AddDataObjectInput_01(GetCppThis(), arg0?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_AddDataObjectInputConnection_02(HandleRef pThis, HandleRef alg);

	/// <summary>
	/// Add a data object to the list of data to display.
	/// </summary>
	public void AddDataObjectInputConnection(vtkAlgorithmOutput alg)
	{
		vtkXYPlotActor_AddDataObjectInputConnection_02(GetCppThis(), alg?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_AddDataSetInput_03(HandleRef pThis, HandleRef ds, string arrayName, int component);

	/// <summary>
	/// Add a dataset to the list of data to append. The array name specifies
	/// which point array to plot. The array must be a vtkDataArray subclass, i.e.
	/// a numeric array. If the array name is NULL, then the default
	/// scalars are used.  The array can have multiple components, but only the
	/// first component is ploted. Note that AddInputDataSet() does not setup
	/// a pipeline connection whereas AddInputConnection() does.
	/// </summary>
	public void AddDataSetInput(vtkDataSet ds, string arrayName, int component)
	{
		vtkXYPlotActor_AddDataSetInput_03(GetCppThis(), ds?.GetCppThis() ?? default(HandleRef), arrayName, component);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_AddDataSetInput_04(HandleRef pThis, HandleRef ds);

	/// <summary>
	/// Add a dataset to the list of data to append. The array name specifies
	/// which point array to plot. The array must be a vtkDataArray subclass, i.e.
	/// a numeric array. If the array name is NULL, then the default
	/// scalars are used.  The array can have multiple components, but only the
	/// first component is ploted. Note that AddInputDataSet() does not setup
	/// a pipeline connection whereas AddInputConnection() does.
	/// </summary>
	public void AddDataSetInput(vtkDataSet ds)
	{
		vtkXYPlotActor_AddDataSetInput_04(GetCppThis(), ds?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_AddDataSetInputConnection_05(HandleRef pThis, HandleRef arg0, string arrayName, int component);

	/// <summary>
	/// Add a dataset to the list of data to append. The array name specifies
	/// which point array to plot. The array must be a vtkDataArray subclass, i.e.
	/// a numeric array. If the array name is NULL, then the default
	/// scalars are used.  The array can have multiple components, but only the
	/// first component is ploted. Note that AddInputDataSet() does not setup
	/// a pipeline connection whereas AddInputConnection() does.
	/// </summary>
	public void AddDataSetInputConnection(vtkAlgorithmOutput arg0, string arrayName, int component)
	{
		vtkXYPlotActor_AddDataSetInputConnection_05(GetCppThis(), arg0?.GetCppThis() ?? default(HandleRef), arrayName, component);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_AddDataSetInputConnection_06(HandleRef pThis, HandleRef arg0);

	/// <summary>
	/// Add a dataset to the list of data to append. The array name specifies
	/// which point array to plot. The array must be a vtkDataArray subclass, i.e.
	/// a numeric array. If the array name is NULL, then the default
	/// scalars are used.  The array can have multiple components, but only the
	/// first component is ploted. Note that AddInputDataSet() does not setup
	/// a pipeline connection whereas AddInputConnection() does.
	/// </summary>
	public void AddDataSetInputConnection(vtkAlgorithmOutput arg0)
	{
		vtkXYPlotActor_AddDataSetInputConnection_06(GetCppThis(), arg0?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_AddUserCurvesPoint_07(HandleRef pThis, double arg0, double arg1, double arg2);

	/// <summary>
	/// Set plot properties
	/// </summary>
	public virtual void AddUserCurvesPoint(double arg0, double arg1, double arg2)
	{
		vtkXYPlotActor_AddUserCurvesPoint_07(GetCppThis(), arg0, arg1, arg2);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_AdjustTitlePositionOff_08(HandleRef pThis);

	/// <summary>
	/// If true, the xyplot actor will adjust the position of the title
	/// automatically to be upper-middle. Default is true.
	/// </summary>
	public virtual void AdjustTitlePositionOff()
	{
		vtkXYPlotActor_AdjustTitlePositionOff_08(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_AdjustTitlePositionOn_09(HandleRef pThis);

	/// <summary>
	/// If true, the xyplot actor will adjust the position of the title
	/// automatically to be upper-middle. Default is true.
	/// </summary>
	public virtual void AdjustTitlePositionOn()
	{
		vtkXYPlotActor_AdjustTitlePositionOn_09(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_ChartBorderOff_10(HandleRef pThis);

	/// <summary>
	/// Set/Get the flag that controls whether a box will be drawn/filled
	/// corresponding to the legend box.
	/// </summary>
	public virtual void ChartBorderOff()
	{
		vtkXYPlotActor_ChartBorderOff_10(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_ChartBorderOn_11(HandleRef pThis);

	/// <summary>
	/// Set/Get the flag that controls whether a box will be drawn/filled
	/// corresponding to the legend box.
	/// </summary>
	public virtual void ChartBorderOn()
	{
		vtkXYPlotActor_ChartBorderOn_11(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_ChartBoxOff_12(HandleRef pThis);

	/// <summary>
	/// Set/Get the flag that controls whether a box will be drawn/filled
	/// corresponding to the chart box.
	/// </summary>
	public virtual void ChartBoxOff()
	{
		vtkXYPlotActor_ChartBoxOff_12(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_ChartBoxOn_13(HandleRef pThis);

	/// <summary>
	/// Set/Get the flag that controls whether a box will be drawn/filled
	/// corresponding to the chart box.
	/// </summary>
	public virtual void ChartBoxOn()
	{
		vtkXYPlotActor_ChartBoxOn_13(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_ExchangeAxesOff_14(HandleRef pThis);

	/// <summary>
	/// Enable/Disable exchange of the x-y axes (i.e., what was x becomes y, and
	/// vice-versa). Exchanging axes affects the labeling as well.
	/// </summary>
	public virtual void ExchangeAxesOff()
	{
		vtkXYPlotActor_ExchangeAxesOff_14(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_ExchangeAxesOn_15(HandleRef pThis);

	/// <summary>
	/// Enable/Disable exchange of the x-y axes (i.e., what was x becomes y, and
	/// vice-versa). Exchanging axes affects the labeling as well.
	/// </summary>
	public virtual void ExchangeAxesOn()
	{
		vtkXYPlotActor_ExchangeAxesOn_15(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetAdjustTitlePosition_16(HandleRef pThis);

	/// <summary>
	/// If true, the xyplot actor will adjust the position of the title
	/// automatically to be upper-middle. Default is true.
	/// </summary>
	public virtual int GetAdjustTitlePosition()
	{
		return vtkXYPlotActor_GetAdjustTitlePosition_16(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetAdjustTitlePositionMode_17(HandleRef pThis);

	/// <summary>
	/// If AdjustTitlePosition is true, the xyplot actor will
	/// adjust the position of the title automatically depending on the
	/// given mode, the mode is a combination of the Alignment flags.
	/// by default: vtkXYPlotActor::AlignHCenter | vtkXYPlotActor::Top
	/// | vtkXYPlotActor::AlignAxisVCenter
	/// </summary>
	public virtual int GetAdjustTitlePositionMode()
	{
		return vtkXYPlotActor_GetAdjustTitlePositionMode_17(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetAdjustXLabels_18(HandleRef pThis);

	/// <summary>
	/// Set/Get the flag that controls whether the labels and ticks are
	/// adjusted for "nice" numerical values to make it easier to read
	/// the labels. The adjustment is based in the Range instance variable.
	/// Call GetAdjustedRange and GetAdjustedNumberOfLabels to get the adjusted
	/// range and number of labels.
	/// </summary>
	public virtual int GetAdjustXLabels()
	{
		return vtkXYPlotActor_GetAdjustXLabels_18(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetAdjustYLabels_19(HandleRef pThis);

	/// <summary>
	/// Set/Get the flag that controls whether the labels and ticks are
	/// adjusted for "nice" numerical values to make it easier to read
	/// the labels. The adjustment is based in the Range instance variable.
	/// Call GetAdjustedRange and GetAdjustedNumberOfLabels to get the adjusted
	/// range and number of labels.
	/// </summary>
	public virtual int GetAdjustYLabels()
	{
		return vtkXYPlotActor_GetAdjustYLabels_19(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetAxisLabelTextProperty_20(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Set/Get the labels text property of all axes. Note that each axis can
	/// be controlled individually through the GetX/YAxisActor2D() methods.
	/// </summary>
	public virtual vtkTextProperty GetAxisLabelTextProperty()
	{
		vtkTextProperty vtkTextProperty2 = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkXYPlotActor_GetAxisLabelTextProperty_20(GetCppThis(), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			vtkTextProperty2 = (vtkTextProperty)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var found);
			if (found)
			{
				vtkTextProperty2.Register(null);
			}
		}
		return vtkTextProperty2;
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetAxisTitleTextProperty_21(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Set/Get the title text property of all axes. Note that each axis can
	/// be controlled individually through the GetX/YAxisActor2D() methods.
	/// </summary>
	public virtual vtkTextProperty GetAxisTitleTextProperty()
	{
		vtkTextProperty vtkTextProperty2 = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkXYPlotActor_GetAxisTitleTextProperty_21(GetCppThis(), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			vtkTextProperty2 = (vtkTextProperty)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var found);
			if (found)
			{
				vtkTextProperty2.Register(null);
			}
		}
		return vtkTextProperty2;
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetBorder_22(HandleRef pThis);

	/// <summary>
	/// Set/Get the spacing between the plot window and the plot. The value
	/// is specified in pixels.
	/// </summary>
	public virtual int GetBorder()
	{
		return vtkXYPlotActor_GetBorder_22(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetBorderMaxValue_23(HandleRef pThis);

	/// <summary>
	/// Set/Get the spacing between the plot window and the plot. The value
	/// is specified in pixels.
	/// </summary>
	public virtual int GetBorderMaxValue()
	{
		return vtkXYPlotActor_GetBorderMaxValue_23(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetBorderMinValue_24(HandleRef pThis);

	/// <summary>
	/// Set/Get the spacing between the plot window and the plot. The value
	/// is specified in pixels.
	/// </summary>
	public virtual int GetBorderMinValue()
	{
		return vtkXYPlotActor_GetBorderMinValue_24(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetChartBorder_25(HandleRef pThis);

	/// <summary>
	/// Set/Get the flag that controls whether a box will be drawn/filled
	/// corresponding to the legend box.
	/// </summary>
	public virtual int GetChartBorder()
	{
		return vtkXYPlotActor_GetChartBorder_25(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetChartBox_26(HandleRef pThis);

	/// <summary>
	/// Set/Get the flag that controls whether a box will be drawn/filled
	/// corresponding to the chart box.
	/// </summary>
	public virtual int GetChartBox()
	{
		return vtkXYPlotActor_GetChartBox_26(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetChartBoxProperty_27(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Get the box vtkProperty2D.
	/// </summary>
	public vtkProperty2D GetChartBoxProperty()
	{
		vtkProperty2D vtkProperty2D2 = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkXYPlotActor_GetChartBoxProperty_27(GetCppThis(), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			vtkProperty2D2 = (vtkProperty2D)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var found);
			if (found)
			{
				vtkProperty2D2.Register(null);
			}
		}
		return vtkProperty2D2;
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetDataObjectPlotMode_28(HandleRef pThis);

	/// <summary>
	/// Indicate whether to plot rows or columns. If plotting rows, then
	/// the dependent variables is taken from a specified row,
	/// versus rows (y).
	/// </summary>
	public virtual int GetDataObjectPlotMode()
	{
		return vtkXYPlotActor_GetDataObjectPlotMode_28(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetDataObjectPlotModeAsString_29(HandleRef pThis);

	/// <summary>
	/// Indicate whether to plot rows or columns. If plotting rows, then
	/// the dependent variables is taken from a specified row,
	/// versus rows (y).
	/// </summary>
	public string GetDataObjectPlotModeAsString()
	{
		return Marshal.PtrToStringAnsi(vtkXYPlotActor_GetDataObjectPlotModeAsString_29(GetCppThis()));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetDataObjectPlotModeMaxValue_30(HandleRef pThis);

	/// <summary>
	/// Indicate whether to plot rows or columns. If plotting rows, then
	/// the dependent variables is taken from a specified row,
	/// versus rows (y).
	/// </summary>
	public virtual int GetDataObjectPlotModeMaxValue()
	{
		return vtkXYPlotActor_GetDataObjectPlotModeMaxValue_30(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetDataObjectPlotModeMinValue_31(HandleRef pThis);

	/// <summary>
	/// Indicate whether to plot rows or columns. If plotting rows, then
	/// the dependent variables is taken from a specified row,
	/// versus rows (y).
	/// </summary>
	public virtual int GetDataObjectPlotModeMinValue()
	{
		return vtkXYPlotActor_GetDataObjectPlotModeMinValue_31(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetDataObjectXComponent_32(HandleRef pThis, int i);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// independent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectXComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public int GetDataObjectXComponent(int i)
	{
		return vtkXYPlotActor_GetDataObjectXComponent_32(GetCppThis(), i);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetDataObjectYComponent_33(HandleRef pThis, int i);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public int GetDataObjectYComponent(int i)
	{
		return vtkXYPlotActor_GetDataObjectYComponent_33(GetCppThis(), i);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetExchangeAxes_34(HandleRef pThis);

	/// <summary>
	/// Enable/Disable exchange of the x-y axes (i.e., what was x becomes y, and
	/// vice-versa). Exchanging axes affects the labeling as well.
	/// </summary>
	public virtual int GetExchangeAxes()
	{
		return vtkXYPlotActor_GetExchangeAxes_34(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern double vtkXYPlotActor_GetGlyphSize_35(HandleRef pThis);

	/// <summary>
	/// Set/Get the factor that controls how big glyphs are in the plot.
	/// The number is expressed as a fraction of the length of the diagonal
	/// of the plot bounding box.
	/// </summary>
	public virtual double GetGlyphSize()
	{
		return vtkXYPlotActor_GetGlyphSize_35(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern double vtkXYPlotActor_GetGlyphSizeMaxValue_36(HandleRef pThis);

	/// <summary>
	/// Set/Get the factor that controls how big glyphs are in the plot.
	/// The number is expressed as a fraction of the length of the diagonal
	/// of the plot bounding box.
	/// </summary>
	public virtual double GetGlyphSizeMaxValue()
	{
		return vtkXYPlotActor_GetGlyphSizeMaxValue_36(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern double vtkXYPlotActor_GetGlyphSizeMinValue_37(HandleRef pThis);

	/// <summary>
	/// Set/Get the factor that controls how big glyphs are in the plot.
	/// The number is expressed as a fraction of the length of the diagonal
	/// of the plot bounding box.
	/// </summary>
	public virtual double GetGlyphSizeMinValue()
	{
		return vtkXYPlotActor_GetGlyphSizeMinValue_37(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetGlyphSource_38(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Retrieve handles to the legend box and glyph source. This is useful
	/// if you would like to change the default behavior of the legend box
	/// or glyph source. For example, the default glyph can be changed from
	/// a line to a vertex plus line, etc.)
	/// </summary>
	public virtual vtkGlyphSource2D GetGlyphSource()
	{
		vtkGlyphSource2D vtkGlyphSource2D2 = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkXYPlotActor_GetGlyphSource_38(GetCppThis(), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			vtkGlyphSource2D2 = (vtkGlyphSource2D)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var found);
			if (found)
			{
				vtkGlyphSource2D2.Register(null);
			}
		}
		return vtkGlyphSource2D2;
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetLabelFormat_39(HandleRef pThis);

	/// <summary>
	/// Set/Get the format with which to print the labels . This sets both X
	/// and Y label formats. GetLabelFormat() returns X label format.
	/// </summary>
	public string GetLabelFormat()
	{
		return Marshal.PtrToStringAnsi(vtkXYPlotActor_GetLabelFormat_39(GetCppThis()));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetLegend_40(HandleRef pThis);

	/// <summary>
	/// Enable/Disable the creation of a legend. If on, the legend labels will
	/// be created automatically unless the per plot legend symbol has been
	/// set.
	/// </summary>
	public virtual int GetLegend()
	{
		return vtkXYPlotActor_GetLegend_40(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetLegendActor_41(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Retrieve handles to the legend box and glyph source. This is useful
	/// if you would like to change the default behavior of the legend box
	/// or glyph source. For example, the default glyph can be changed from
	/// a line to a vertex plus line, etc.)
	/// </summary>
	public virtual vtkLegendBoxActor GetLegendActor()
	{
		vtkLegendBoxActor vtkLegendBoxActor2 = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkXYPlotActor_GetLegendActor_41(GetCppThis(), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			vtkLegendBoxActor2 = (vtkLegendBoxActor)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var found);
			if (found)
			{
				vtkLegendBoxActor2.Register(null);
			}
		}
		return vtkLegendBoxActor2;
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetLegendPosition_42(HandleRef pThis);

	/// <summary>
	/// Use these methods to control the position of the legend. The variables
	/// LegendPosition and LegendPosition2 define the lower-left and upper-right
	/// position of the legend. The coordinates are expressed as normalized
	/// values with respect to the rectangle defined by PositionCoordinate and
	/// Position2Coordinate. Note that LegendPosition2 is relative to
	/// LegendPosition.
	/// </summary>
	public virtual double[] GetLegendPosition()
	{
		IntPtr intPtr = vtkXYPlotActor_GetLegendPosition_42(GetCppThis());
		double[] array = null;
		if (IntPtr.Zero != intPtr)
		{
			array = new double[2];
			Marshal.Copy(intPtr, array, 0, array.Length);
		}
		return array;
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_GetLegendPosition_43(HandleRef pThis, ref double _arg1, ref double _arg2);

	/// <summary>
	/// Use these methods to control the position of the legend. The variables
	/// LegendPosition and LegendPosition2 define the lower-left and upper-right
	/// position of the legend. The coordinates are expressed as normalized
	/// values with respect to the rectangle defined by PositionCoordinate and
	/// Position2Coordinate. Note that LegendPosition2 is relative to
	/// LegendPosition.
	/// </summary>
	public virtual void GetLegendPosition(ref double _arg1, ref double _arg2)
	{
		vtkXYPlotActor_GetLegendPosition_43(GetCppThis(), ref _arg1, ref _arg2);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_GetLegendPosition_44(HandleRef pThis, IntPtr _arg);

	/// <summary>
	/// Use these methods to control the position of the legend. The variables
	/// LegendPosition and LegendPosition2 define the lower-left and upper-right
	/// position of the legend. The coordinates are expressed as normalized
	/// values with respect to the rectangle defined by PositionCoordinate and
	/// Position2Coordinate. Note that LegendPosition2 is relative to
	/// LegendPosition.
	/// </summary>
	public virtual void GetLegendPosition(IntPtr _arg)
	{
		vtkXYPlotActor_GetLegendPosition_44(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetLegendPosition2_45(HandleRef pThis);

	/// <summary>
	/// Use these methods to control the position of the legend. The variables
	/// LegendPosition and LegendPosition2 define the lower-left and upper-right
	/// position of the legend. The coordinates are expressed as normalized
	/// values with respect to the rectangle defined by PositionCoordinate and
	/// Position2Coordinate. Note that LegendPosition2 is relative to
	/// LegendPosition.
	/// </summary>
	public virtual double[] GetLegendPosition2()
	{
		IntPtr intPtr = vtkXYPlotActor_GetLegendPosition2_45(GetCppThis());
		double[] array = null;
		if (IntPtr.Zero != intPtr)
		{
			array = new double[2];
			Marshal.Copy(intPtr, array, 0, array.Length);
		}
		return array;
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_GetLegendPosition2_46(HandleRef pThis, ref double _arg1, ref double _arg2);

	/// <summary>
	/// Use these methods to control the position of the legend. The variables
	/// LegendPosition and LegendPosition2 define the lower-left and upper-right
	/// position of the legend. The coordinates are expressed as normalized
	/// values with respect to the rectangle defined by PositionCoordinate and
	/// Position2Coordinate. Note that LegendPosition2 is relative to
	/// LegendPosition.
	/// </summary>
	public virtual void GetLegendPosition2(ref double _arg1, ref double _arg2)
	{
		vtkXYPlotActor_GetLegendPosition2_46(GetCppThis(), ref _arg1, ref _arg2);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_GetLegendPosition2_47(HandleRef pThis, IntPtr _arg);

	/// <summary>
	/// Use these methods to control the position of the legend. The variables
	/// LegendPosition and LegendPosition2 define the lower-left and upper-right
	/// position of the legend. The coordinates are expressed as normalized
	/// values with respect to the rectangle defined by PositionCoordinate and
	/// Position2Coordinate. Note that LegendPosition2 is relative to
	/// LegendPosition.
	/// </summary>
	public virtual void GetLegendPosition2(IntPtr _arg)
	{
		vtkXYPlotActor_GetLegendPosition2_47(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetLogx_48(HandleRef pThis);

	/// <summary>
	/// Enable/Disable plotting of Log of x-values.
	/// </summary>
	public virtual int GetLogx()
	{
		return vtkXYPlotActor_GetLogx_48(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern ulong vtkXYPlotActor_GetMTime_49(HandleRef pThis);

	/// <summary>
	/// Take into account the modified time of internal helper classes.
	/// </summary>
	public override ulong GetMTime()
	{
		return vtkXYPlotActor_GetMTime_49(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern long vtkXYPlotActor_GetNumberOfGenerationsFromBase_50(HandleRef pThis, string type);

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public override long GetNumberOfGenerationsFromBase(string type)
	{
		return vtkXYPlotActor_GetNumberOfGenerationsFromBase_50(GetCppThis(), type);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern long vtkXYPlotActor_GetNumberOfGenerationsFromBaseType_51(string type);

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public new static long GetNumberOfGenerationsFromBaseType(string type)
	{
		return vtkXYPlotActor_GetNumberOfGenerationsFromBaseType_51(type);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetNumberOfXLabels_52(HandleRef pThis);

	/// <summary>
	/// Set/Get the number of annotation labels to show along the x and y axes.
	/// This values is a suggestion: the number of labels may vary depending
	/// on the particulars of the data. The convenience method
	/// SetNumberOfLabels() sets the number of x and y labels to the same value.
	/// </summary>
	public virtual int GetNumberOfXLabels()
	{
		return vtkXYPlotActor_GetNumberOfXLabels_52(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetNumberOfXLabelsMaxValue_53(HandleRef pThis);

	/// <summary>
	/// Set/Get the number of annotation labels to show along the x and y axes.
	/// This values is a suggestion: the number of labels may vary depending
	/// on the particulars of the data. The convenience method
	/// SetNumberOfLabels() sets the number of x and y labels to the same value.
	/// </summary>
	public virtual int GetNumberOfXLabelsMaxValue()
	{
		return vtkXYPlotActor_GetNumberOfXLabelsMaxValue_53(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetNumberOfXLabelsMinValue_54(HandleRef pThis);

	/// <summary>
	/// Set/Get the number of annotation labels to show along the x and y axes.
	/// This values is a suggestion: the number of labels may vary depending
	/// on the particulars of the data. The convenience method
	/// SetNumberOfLabels() sets the number of x and y labels to the same value.
	/// </summary>
	public virtual int GetNumberOfXLabelsMinValue()
	{
		return vtkXYPlotActor_GetNumberOfXLabelsMinValue_54(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetNumberOfXMinorTicks_55(HandleRef pThis);

	/// <summary>
	/// Set/Get the number of minor ticks in X or Y.
	/// </summary>
	public int GetNumberOfXMinorTicks()
	{
		return vtkXYPlotActor_GetNumberOfXMinorTicks_55(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetNumberOfYLabels_56(HandleRef pThis);

	/// <summary>
	/// Set/Get the number of annotation labels to show along the x and y axes.
	/// This values is a suggestion: the number of labels may vary depending
	/// on the particulars of the data. The convenience method
	/// SetNumberOfLabels() sets the number of x and y labels to the same value.
	/// </summary>
	public virtual int GetNumberOfYLabels()
	{
		return vtkXYPlotActor_GetNumberOfYLabels_56(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetNumberOfYLabelsMaxValue_57(HandleRef pThis);

	/// <summary>
	/// Set/Get the number of annotation labels to show along the x and y axes.
	/// This values is a suggestion: the number of labels may vary depending
	/// on the particulars of the data. The convenience method
	/// SetNumberOfLabels() sets the number of x and y labels to the same value.
	/// </summary>
	public virtual int GetNumberOfYLabelsMaxValue()
	{
		return vtkXYPlotActor_GetNumberOfYLabelsMaxValue_57(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetNumberOfYLabelsMinValue_58(HandleRef pThis);

	/// <summary>
	/// Set/Get the number of annotation labels to show along the x and y axes.
	/// This values is a suggestion: the number of labels may vary depending
	/// on the particulars of the data. The convenience method
	/// SetNumberOfLabels() sets the number of x and y labels to the same value.
	/// </summary>
	public virtual int GetNumberOfYLabelsMinValue()
	{
		return vtkXYPlotActor_GetNumberOfYLabelsMinValue_58(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetNumberOfYMinorTicks_59(HandleRef pThis);

	/// <summary>
	/// Set/Get the number of minor ticks in X or Y.
	/// </summary>
	public int GetNumberOfYMinorTicks()
	{
		return vtkXYPlotActor_GetNumberOfYMinorTicks_59(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetPlotColor_60(HandleRef pThis, int i);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public double[] GetPlotColor(int i)
	{
		IntPtr intPtr = vtkXYPlotActor_GetPlotColor_60(GetCppThis(), i);
		double[] array = null;
		if (IntPtr.Zero != intPtr)
		{
			array = new double[3];
			Marshal.Copy(intPtr, array, 0, array.Length);
		}
		return array;
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetPlotCoordinate_61(HandleRef pThis);

	/// <summary>
	/// An alternate form of ViewportToPlotCoordinate() above. This method
	/// inputs the viewport coordinate pair (defined by the ivar
	/// ViewportCoordinate)and then stores them in the ivar PlotCoordinate.
	/// </summary>
	public virtual double[] GetPlotCoordinate()
	{
		IntPtr intPtr = vtkXYPlotActor_GetPlotCoordinate_61(GetCppThis());
		double[] array = null;
		if (IntPtr.Zero != intPtr)
		{
			array = new double[2];
			Marshal.Copy(intPtr, array, 0, array.Length);
		}
		return array;
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_GetPlotCoordinate_62(HandleRef pThis, ref double _arg1, ref double _arg2);

	/// <summary>
	/// An alternate form of ViewportToPlotCoordinate() above. This method
	/// inputs the viewport coordinate pair (defined by the ivar
	/// ViewportCoordinate)and then stores them in the ivar PlotCoordinate.
	/// </summary>
	public virtual void GetPlotCoordinate(ref double _arg1, ref double _arg2)
	{
		vtkXYPlotActor_GetPlotCoordinate_62(GetCppThis(), ref _arg1, ref _arg2);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_GetPlotCoordinate_63(HandleRef pThis, IntPtr _arg);

	/// <summary>
	/// An alternate form of ViewportToPlotCoordinate() above. This method
	/// inputs the viewport coordinate pair (defined by the ivar
	/// ViewportCoordinate)and then stores them in the ivar PlotCoordinate.
	/// </summary>
	public virtual void GetPlotCoordinate(IntPtr _arg)
	{
		vtkXYPlotActor_GetPlotCoordinate_63(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetPlotCurveLines_64(HandleRef pThis);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public virtual int GetPlotCurveLines()
	{
		return vtkXYPlotActor_GetPlotCurveLines_64(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetPlotCurvePoints_65(HandleRef pThis);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public virtual int GetPlotCurvePoints()
	{
		return vtkXYPlotActor_GetPlotCurvePoints_65(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetPlotLabel_66(HandleRef pThis, int i);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public string GetPlotLabel(int i)
	{
		return Marshal.PtrToStringAnsi(vtkXYPlotActor_GetPlotLabel_66(GetCppThis(), i));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetPlotLines_67(HandleRef pThis);

	/// <summary>
	/// Set/Get whether the lines are rendered.  The line width can be set in
	/// the property object.
	/// </summary>
	public virtual int GetPlotLines()
	{
		return vtkXYPlotActor_GetPlotLines_67(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetPlotLines_68(HandleRef pThis, int i);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public int GetPlotLines(int i)
	{
		return vtkXYPlotActor_GetPlotLines_68(GetCppThis(), i);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetPlotPoints_69(HandleRef pThis);

	/// <summary>
	/// Set/Get whether the points are rendered.  The point size can be set in
	/// the property object. This is a global flag which affects the plot only
	/// if per curve symbols are not defined.
	/// </summary>
	public virtual int GetPlotPoints()
	{
		return vtkXYPlotActor_GetPlotPoints_69(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetPlotPoints_70(HandleRef pThis, int i);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public int GetPlotPoints(int i)
	{
		return vtkXYPlotActor_GetPlotPoints_70(GetCppThis(), i);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetPlotSymbol_71(HandleRef pThis, int i, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public vtkPolyData GetPlotSymbol(int i)
	{
		vtkPolyData vtkPolyData2 = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkXYPlotActor_GetPlotSymbol_71(GetCppThis(), i, ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			vtkPolyData2 = (vtkPolyData)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var found);
			if (found)
			{
				vtkPolyData2.Register(null);
			}
		}
		return vtkPolyData2;
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetPointComponent_72(HandleRef pThis, int i);

	/// <summary>
	/// If plotting points by value, which component to use to determine the
	/// value. This sets a value per each input dataset (i.e., the ith dataset).
	/// </summary>
	public int GetPointComponent(int i)
	{
		return vtkXYPlotActor_GetPointComponent_72(GetCppThis(), i);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern double vtkXYPlotActor_GetReferenceXValue_73(HandleRef pThis);

	/// <summary>
	/// Set/Get the value for the X reference line
	/// </summary>
	public virtual double GetReferenceXValue()
	{
		return vtkXYPlotActor_GetReferenceXValue_73(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern double vtkXYPlotActor_GetReferenceYValue_74(HandleRef pThis);

	/// <summary>
	/// Set/Get the value for the Y reference line
	/// </summary>
	public virtual double GetReferenceYValue()
	{
		return vtkXYPlotActor_GetReferenceYValue_74(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetReverseXAxis_75(HandleRef pThis);

	/// <summary>
	/// Normally the x-axis is plotted from minimum to maximum. Setting this instance
	/// variable causes the x-axis to be plotted from maximum to minimum. Note that
	/// boolean always applies to the x-axis even if ExchangeAxes is set.
	/// </summary>
	public virtual int GetReverseXAxis()
	{
		return vtkXYPlotActor_GetReverseXAxis_75(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetReverseYAxis_76(HandleRef pThis);

	/// <summary>
	/// Normally the y-axis is plotted from minimum to maximum. Setting this instance
	/// variable causes the y-axis to be plotted from maximum to minimum. Note that
	/// boolean always applies to the y-axis even if ExchangeAxes is set.
	/// </summary>
	public virtual int GetReverseYAxis()
	{
		return vtkXYPlotActor_GetReverseYAxis_76(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetShowReferenceXLine_77(HandleRef pThis);

	/// <summary>
	/// Set/Get if the X reference line is visible. hidden by default
	/// </summary>
	public virtual int GetShowReferenceXLine()
	{
		return vtkXYPlotActor_GetShowReferenceXLine_77(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetShowReferenceYLine_78(HandleRef pThis);

	/// <summary>
	/// Set/Get if the Y reference line is visible. hidden by default
	/// </summary>
	public virtual int GetShowReferenceYLine()
	{
		return vtkXYPlotActor_GetShowReferenceYLine_78(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetTitle_79(HandleRef pThis);

	/// <summary>
	/// Set/Get the title of the x-y plot.
	/// </summary>
	public virtual string GetTitle()
	{
		return Marshal.PtrToStringAnsi(vtkXYPlotActor_GetTitle_79(GetCppThis()));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetTitlePosition_80(HandleRef pThis);

	/// <summary>
	/// Set/Get the position of the title. This has no effect if
	/// AdjustTitlePosition is true.
	/// </summary>
	public virtual double[] GetTitlePosition()
	{
		IntPtr intPtr = vtkXYPlotActor_GetTitlePosition_80(GetCppThis());
		double[] array = null;
		if (IntPtr.Zero != intPtr)
		{
			array = new double[2];
			Marshal.Copy(intPtr, array, 0, array.Length);
		}
		return array;
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_GetTitlePosition_81(HandleRef pThis, ref double _arg1, ref double _arg2);

	/// <summary>
	/// Set/Get the position of the title. This has no effect if
	/// AdjustTitlePosition is true.
	/// </summary>
	public virtual void GetTitlePosition(ref double _arg1, ref double _arg2)
	{
		vtkXYPlotActor_GetTitlePosition_81(GetCppThis(), ref _arg1, ref _arg2);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_GetTitlePosition_82(HandleRef pThis, IntPtr _arg);

	/// <summary>
	/// Set/Get the position of the title. This has no effect if
	/// AdjustTitlePosition is true.
	/// </summary>
	public virtual void GetTitlePosition(IntPtr _arg)
	{
		vtkXYPlotActor_GetTitlePosition_82(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetTitleTextProperty_83(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Set/Get the title text property.
	/// </summary>
	public virtual vtkTextProperty GetTitleTextProperty()
	{
		vtkTextProperty vtkTextProperty2 = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkXYPlotActor_GetTitleTextProperty_83(GetCppThis(), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			vtkTextProperty2 = (vtkTextProperty)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var found);
			if (found)
			{
				vtkTextProperty2.Register(null);
			}
		}
		return vtkTextProperty2;
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetViewportCoordinate_84(HandleRef pThis);

	/// <summary>
	/// An alternate form of PlotToViewportCoordinate() above. This method
	/// inputs the plot coordinate pair (defined in the ivar PlotCoordinate)
	/// and then stores them in the ivar ViewportCoordinate. (This method
	/// can be wrapped.)
	/// </summary>
	public virtual double[] GetViewportCoordinate()
	{
		IntPtr intPtr = vtkXYPlotActor_GetViewportCoordinate_84(GetCppThis());
		double[] array = null;
		if (IntPtr.Zero != intPtr)
		{
			array = new double[2];
			Marshal.Copy(intPtr, array, 0, array.Length);
		}
		return array;
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_GetViewportCoordinate_85(HandleRef pThis, ref double _arg1, ref double _arg2);

	/// <summary>
	/// An alternate form of PlotToViewportCoordinate() above. This method
	/// inputs the plot coordinate pair (defined in the ivar PlotCoordinate)
	/// and then stores them in the ivar ViewportCoordinate. (This method
	/// can be wrapped.)
	/// </summary>
	public virtual void GetViewportCoordinate(ref double _arg1, ref double _arg2)
	{
		vtkXYPlotActor_GetViewportCoordinate_85(GetCppThis(), ref _arg1, ref _arg2);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_GetViewportCoordinate_86(HandleRef pThis, IntPtr _arg);

	/// <summary>
	/// An alternate form of PlotToViewportCoordinate() above. This method
	/// inputs the plot coordinate pair (defined in the ivar PlotCoordinate)
	/// and then stores them in the ivar ViewportCoordinate. (This method
	/// can be wrapped.)
	/// </summary>
	public virtual void GetViewportCoordinate(IntPtr _arg)
	{
		vtkXYPlotActor_GetViewportCoordinate_86(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetXAxisActor2D_87(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Retrieve handles to the X and Y axis (so that you can set their text
	/// properties for example)
	/// </summary>
	public vtkAxisActor2D GetXAxisActor2D()
	{
		vtkAxisActor2D vtkAxisActor2D2 = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkXYPlotActor_GetXAxisActor2D_87(GetCppThis(), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			vtkAxisActor2D2 = (vtkAxisActor2D)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var found);
			if (found)
			{
				vtkAxisActor2D2.Register(null);
			}
		}
		return vtkAxisActor2D2;
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetXLabelFormat_88(HandleRef pThis);

	/// <summary>
	/// Set/Get the format with which to print the X label.
	/// </summary>
	public virtual string GetXLabelFormat()
	{
		return Marshal.PtrToStringAnsi(vtkXYPlotActor_GetXLabelFormat_88(GetCppThis()));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetXRange_89(HandleRef pThis);

	/// <summary>
	/// Set the plot range (range of independent and dependent variables)
	/// to plot. Data outside of the range will be clipped. If the plot
	/// range of either the x or y variables is set to (v1,v2), where
	/// v1 == v2, then the range will be computed automatically. Note that
	/// the x-range values should be consistent with the way the independent
	/// variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
	/// </summary>
	public virtual double[] GetXRange()
	{
		IntPtr intPtr = vtkXYPlotActor_GetXRange_89(GetCppThis());
		double[] array = null;
		if (IntPtr.Zero != intPtr)
		{
			array = new double[2];
			Marshal.Copy(intPtr, array, 0, array.Length);
		}
		return array;
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_GetXRange_90(HandleRef pThis, IntPtr data);

	/// <summary>
	/// Set the plot range (range of independent and dependent variables)
	/// to plot. Data outside of the range will be clipped. If the plot
	/// range of either the x or y variables is set to (v1,v2), where
	/// v1 == v2, then the range will be computed automatically. Note that
	/// the x-range values should be consistent with the way the independent
	/// variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
	/// </summary>
	public virtual void GetXRange(IntPtr data)
	{
		vtkXYPlotActor_GetXRange_90(GetCppThis(), data);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetXTitle_91(HandleRef pThis);

	/// <summary>
	/// Set/Get the title of the x axis
	/// </summary>
	public virtual string GetXTitle()
	{
		return Marshal.PtrToStringAnsi(vtkXYPlotActor_GetXTitle_91(GetCppThis()));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern double vtkXYPlotActor_GetXTitlePosition_92(HandleRef pThis);

	/// <summary>
	/// Set/Get the position of the title of X axis.
	/// </summary>
	public double GetXTitlePosition()
	{
		return vtkXYPlotActor_GetXTitlePosition_92(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetXValues_93(HandleRef pThis);

	/// <summary>
	/// Specify how the independent (x) variable is computed from the points.
	/// The independent variable can be the scalar/point index (i.e., point id),
	/// the accumulated arc length along the points, the normalized arc length,
	/// or by component value. If plotting datasets (e.g., points), the value
	/// that is used is specified by the PointComponent ivar.  (Note: these
	/// methods also control how field data is plotted. Field data is usually
	/// plotted by value or index, if plotting length 1-dimensional length
	/// measures are used.)
	/// </summary>
	public virtual int GetXValues()
	{
		return vtkXYPlotActor_GetXValues_93(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetXValuesAsString_94(HandleRef pThis);

	/// <summary>
	/// Specify how the independent (x) variable is computed from the points.
	/// The independent variable can be the scalar/point index (i.e., point id),
	/// the accumulated arc length along the points, the normalized arc length,
	/// or by component value. If plotting datasets (e.g., points), the value
	/// that is used is specified by the PointComponent ivar.  (Note: these
	/// methods also control how field data is plotted. Field data is usually
	/// plotted by value or index, if plotting length 1-dimensional length
	/// measures are used.)
	/// </summary>
	public string GetXValuesAsString()
	{
		return Marshal.PtrToStringAnsi(vtkXYPlotActor_GetXValuesAsString_94(GetCppThis()));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetXValuesMaxValue_95(HandleRef pThis);

	/// <summary>
	/// Specify how the independent (x) variable is computed from the points.
	/// The independent variable can be the scalar/point index (i.e., point id),
	/// the accumulated arc length along the points, the normalized arc length,
	/// or by component value. If plotting datasets (e.g., points), the value
	/// that is used is specified by the PointComponent ivar.  (Note: these
	/// methods also control how field data is plotted. Field data is usually
	/// plotted by value or index, if plotting length 1-dimensional length
	/// measures are used.)
	/// </summary>
	public virtual int GetXValuesMaxValue()
	{
		return vtkXYPlotActor_GetXValuesMaxValue_95(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetXValuesMinValue_96(HandleRef pThis);

	/// <summary>
	/// Specify how the independent (x) variable is computed from the points.
	/// The independent variable can be the scalar/point index (i.e., point id),
	/// the accumulated arc length along the points, the normalized arc length,
	/// or by component value. If plotting datasets (e.g., points), the value
	/// that is used is specified by the PointComponent ivar.  (Note: these
	/// methods also control how field data is plotted. Field data is usually
	/// plotted by value or index, if plotting length 1-dimensional length
	/// measures are used.)
	/// </summary>
	public virtual int GetXValuesMinValue()
	{
		return vtkXYPlotActor_GetXValuesMinValue_96(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetYAxisActor2D_97(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Retrieve handles to the X and Y axis (so that you can set their text
	/// properties for example)
	/// </summary>
	public vtkAxisActor2D GetYAxisActor2D()
	{
		vtkAxisActor2D vtkAxisActor2D2 = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkXYPlotActor_GetYAxisActor2D_97(GetCppThis(), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			vtkAxisActor2D2 = (vtkAxisActor2D)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var found);
			if (found)
			{
				vtkAxisActor2D2.Register(null);
			}
		}
		return vtkAxisActor2D2;
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetYLabelFormat_98(HandleRef pThis);

	/// <summary>
	/// Set/Get the format with which to print the Y label.
	/// </summary>
	public virtual string GetYLabelFormat()
	{
		return Marshal.PtrToStringAnsi(vtkXYPlotActor_GetYLabelFormat_98(GetCppThis()));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetYRange_99(HandleRef pThis);

	/// <summary>
	/// Set the plot range (range of independent and dependent variables)
	/// to plot. Data outside of the range will be clipped. If the plot
	/// range of either the x or y variables is set to (v1,v2), where
	/// v1 == v2, then the range will be computed automatically. Note that
	/// the x-range values should be consistent with the way the independent
	/// variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
	/// </summary>
	public virtual double[] GetYRange()
	{
		IntPtr intPtr = vtkXYPlotActor_GetYRange_99(GetCppThis());
		double[] array = null;
		if (IntPtr.Zero != intPtr)
		{
			array = new double[2];
			Marshal.Copy(intPtr, array, 0, array.Length);
		}
		return array;
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_GetYRange_100(HandleRef pThis, IntPtr data);

	/// <summary>
	/// Set the plot range (range of independent and dependent variables)
	/// to plot. Data outside of the range will be clipped. If the plot
	/// range of either the x or y variables is set to (v1,v2), where
	/// v1 == v2, then the range will be computed automatically. Note that
	/// the x-range values should be consistent with the way the independent
	/// variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
	/// </summary>
	public virtual void GetYRange(IntPtr data)
	{
		vtkXYPlotActor_GetYRange_100(GetCppThis(), data);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_GetYTitle_101(HandleRef pThis);

	/// <summary>
	/// Set/Get the title of the y axis
	/// </summary>
	public string GetYTitle()
	{
		return Marshal.PtrToStringAnsi(vtkXYPlotActor_GetYTitle_101(GetCppThis()));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_GetYTitlePosition_102(HandleRef pThis);

	/// <summary>
	/// Set/Get the position of the title of Y axis.
	/// </summary>
	public virtual int GetYTitlePosition()
	{
		return vtkXYPlotActor_GetYTitlePosition_102(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_HasTranslucentPolygonalGeometry_103(HandleRef pThis);

	/// <summary>
	/// Does this prop have some translucent polygonal geometry?
	/// </summary>
	public override int HasTranslucentPolygonalGeometry()
	{
		return vtkXYPlotActor_HasTranslucentPolygonalGeometry_103(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_IsA_104(HandleRef pThis, string type);

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public override int IsA(string type)
	{
		return vtkXYPlotActor_IsA_104(GetCppThis(), type);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_IsInPlot_105(HandleRef pThis, HandleRef viewport, double u, double v);

	/// <summary>
	/// Is the specified viewport position within the plot area (as opposed to the
	/// region used by the plot plus the labels)?
	/// </summary>
	public int IsInPlot(vtkViewport viewport, double u, double v)
	{
		return vtkXYPlotActor_IsInPlot_105(GetCppThis(), viewport?.GetCppThis() ?? default(HandleRef), u, v);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_IsTypeOf_106(string type);

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public new static int IsTypeOf(string type)
	{
		return vtkXYPlotActor_IsTypeOf_106(type);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_LegendOff_107(HandleRef pThis);

	/// <summary>
	/// Enable/Disable the creation of a legend. If on, the legend labels will
	/// be created automatically unless the per plot legend symbol has been
	/// set.
	/// </summary>
	public virtual void LegendOff()
	{
		vtkXYPlotActor_LegendOff_107(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_LegendOn_108(HandleRef pThis);

	/// <summary>
	/// Enable/Disable the creation of a legend. If on, the legend labels will
	/// be created automatically unless the per plot legend symbol has been
	/// set.
	/// </summary>
	public virtual void LegendOn()
	{
		vtkXYPlotActor_LegendOn_108(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_LogxOff_109(HandleRef pThis);

	/// <summary>
	/// Enable/Disable plotting of Log of x-values.
	/// </summary>
	public virtual void LogxOff()
	{
		vtkXYPlotActor_LogxOff_109(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_LogxOn_110(HandleRef pThis);

	/// <summary>
	/// Enable/Disable plotting of Log of x-values.
	/// </summary>
	public virtual void LogxOn()
	{
		vtkXYPlotActor_LogxOn_110(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_NewInstance_112(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public new vtkXYPlotActor NewInstance()
	{
		vtkXYPlotActor result = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkXYPlotActor_NewInstance_112(GetCppThis(), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			result = (vtkXYPlotActor)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var _);
		}
		return result;
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_PlotCurveLinesOff_113(HandleRef pThis);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public virtual void PlotCurveLinesOff()
	{
		vtkXYPlotActor_PlotCurveLinesOff_113(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_PlotCurveLinesOn_114(HandleRef pThis);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public virtual void PlotCurveLinesOn()
	{
		vtkXYPlotActor_PlotCurveLinesOn_114(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_PlotCurvePointsOff_115(HandleRef pThis);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public virtual void PlotCurvePointsOff()
	{
		vtkXYPlotActor_PlotCurvePointsOff_115(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_PlotCurvePointsOn_116(HandleRef pThis);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public virtual void PlotCurvePointsOn()
	{
		vtkXYPlotActor_PlotCurvePointsOn_116(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_PlotLinesOff_117(HandleRef pThis);

	/// <summary>
	/// Set/Get whether the lines are rendered.  The line width can be set in
	/// the property object.
	/// </summary>
	public virtual void PlotLinesOff()
	{
		vtkXYPlotActor_PlotLinesOff_117(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_PlotLinesOn_118(HandleRef pThis);

	/// <summary>
	/// Set/Get whether the lines are rendered.  The line width can be set in
	/// the property object.
	/// </summary>
	public virtual void PlotLinesOn()
	{
		vtkXYPlotActor_PlotLinesOn_118(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_PlotPointsOff_119(HandleRef pThis);

	/// <summary>
	/// Set/Get whether the points are rendered.  The point size can be set in
	/// the property object. This is a global flag which affects the plot only
	/// if per curve symbols are not defined.
	/// </summary>
	public virtual void PlotPointsOff()
	{
		vtkXYPlotActor_PlotPointsOff_119(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_PlotPointsOn_120(HandleRef pThis);

	/// <summary>
	/// Set/Get whether the points are rendered.  The point size can be set in
	/// the property object. This is a global flag which affects the plot only
	/// if per curve symbols are not defined.
	/// </summary>
	public virtual void PlotPointsOn()
	{
		vtkXYPlotActor_PlotPointsOn_120(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_PlotToViewportCoordinate_121(HandleRef pThis, HandleRef viewport, ref double u, ref double v);

	/// <summary>
	/// Given a plot coordinate, return the viewpoint position
	/// </summary>
	public void PlotToViewportCoordinate(vtkViewport viewport, ref double u, ref double v)
	{
		vtkXYPlotActor_PlotToViewportCoordinate_121(GetCppThis(), viewport?.GetCppThis() ?? default(HandleRef), ref u, ref v);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_PlotToViewportCoordinate_122(HandleRef pThis, HandleRef viewport);

	/// <summary>
	/// An alternate form of PlotToViewportCoordinate() above. This method
	/// inputs the plot coordinate pair (defined in the ivar PlotCoordinate)
	/// and then stores them in the ivar ViewportCoordinate. (This method
	/// can be wrapped.)
	/// </summary>
	public void PlotToViewportCoordinate(vtkViewport viewport)
	{
		vtkXYPlotActor_PlotToViewportCoordinate_122(GetCppThis(), viewport?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_ReleaseGraphicsResources_123(HandleRef pThis, HandleRef arg0);

	/// <summary>
	/// Release any graphics resources that are being consumed by this actor.
	/// The parameter window could be used to determine which graphic
	/// resources to release.
	/// </summary>
	public override void ReleaseGraphicsResources(vtkWindow arg0)
	{
		vtkXYPlotActor_ReleaseGraphicsResources_123(GetCppThis(), arg0?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_RemoveAllActiveCurves_124(HandleRef pThis);

	/// <summary>
	/// Set plot properties
	/// </summary>
	public virtual void RemoveAllActiveCurves()
	{
		vtkXYPlotActor_RemoveAllActiveCurves_124(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_RemoveAllDataSetInputConnections_125(HandleRef pThis);

	/// <summary>
	/// This removes all of the data set inputs,
	/// but does not change the data object inputs.
	/// </summary>
	public void RemoveAllDataSetInputConnections()
	{
		vtkXYPlotActor_RemoveAllDataSetInputConnections_125(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_RemoveDataObjectInput_126(HandleRef pThis, HandleRef arg0);

	/// <summary>
	/// Remove a dataset from the list of data to display.
	/// </summary>
	public void RemoveDataObjectInput(vtkDataObject arg0)
	{
		vtkXYPlotActor_RemoveDataObjectInput_126(GetCppThis(), arg0?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_RemoveDataObjectInputConnection_127(HandleRef pThis, HandleRef aout);

	/// <summary>
	/// Remove a dataset from the list of data to display.
	/// </summary>
	public void RemoveDataObjectInputConnection(vtkAlgorithmOutput aout)
	{
		vtkXYPlotActor_RemoveDataObjectInputConnection_127(GetCppThis(), aout?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_RemoveDataSetInput_128(HandleRef pThis, HandleRef ds, string arrayName, int component);

	/// <summary>
	/// Remove a dataset from the list of data to append.
	/// </summary>
	public void RemoveDataSetInput(vtkDataSet ds, string arrayName, int component)
	{
		vtkXYPlotActor_RemoveDataSetInput_128(GetCppThis(), ds?.GetCppThis() ?? default(HandleRef), arrayName, component);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_RemoveDataSetInput_129(HandleRef pThis, HandleRef ds);

	/// <summary>
	/// Remove a dataset from the list of data to append.
	/// </summary>
	public void RemoveDataSetInput(vtkDataSet ds)
	{
		vtkXYPlotActor_RemoveDataSetInput_129(GetCppThis(), ds?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_RemoveDataSetInputConnection_130(HandleRef pThis, HandleRef arg0, string arrayName, int component);

	/// <summary>
	/// Remove a dataset from the list of data to append.
	/// </summary>
	public void RemoveDataSetInputConnection(vtkAlgorithmOutput arg0, string arrayName, int component)
	{
		vtkXYPlotActor_RemoveDataSetInputConnection_130(GetCppThis(), arg0?.GetCppThis() ?? default(HandleRef), arrayName, component);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_RemoveDataSetInputConnection_131(HandleRef pThis, HandleRef arg0);

	/// <summary>
	/// Remove a dataset from the list of data to append.
	/// </summary>
	public void RemoveDataSetInputConnection(vtkAlgorithmOutput arg0)
	{
		vtkXYPlotActor_RemoveDataSetInputConnection_131(GetCppThis(), arg0?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_RenderOpaqueGeometry_132(HandleRef pThis, HandleRef arg0);

	/// <summary>
	/// WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE
	/// DO NOT USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS.
	/// Draw the x-y plot.
	/// </summary>
	public override int RenderOpaqueGeometry(vtkViewport arg0)
	{
		return vtkXYPlotActor_RenderOpaqueGeometry_132(GetCppThis(), arg0?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_RenderOverlay_133(HandleRef pThis, HandleRef arg0);

	/// <summary>
	/// WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE
	/// DO NOT USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS.
	/// Draw the x-y plot.
	/// </summary>
	public override int RenderOverlay(vtkViewport arg0)
	{
		return vtkXYPlotActor_RenderOverlay_133(GetCppThis(), arg0?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkXYPlotActor_RenderTranslucentPolygonalGeometry_134(HandleRef pThis, HandleRef arg0);

	/// <summary>
	/// WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE
	/// DO NOT USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS.
	/// Draw the x-y plot.
	/// </summary>
	public override int RenderTranslucentPolygonalGeometry(vtkViewport arg0)
	{
		return vtkXYPlotActor_RenderTranslucentPolygonalGeometry_134(GetCppThis(), arg0?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_ReverseXAxisOff_135(HandleRef pThis);

	/// <summary>
	/// Normally the x-axis is plotted from minimum to maximum. Setting this instance
	/// variable causes the x-axis to be plotted from maximum to minimum. Note that
	/// boolean always applies to the x-axis even if ExchangeAxes is set.
	/// </summary>
	public virtual void ReverseXAxisOff()
	{
		vtkXYPlotActor_ReverseXAxisOff_135(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_ReverseXAxisOn_136(HandleRef pThis);

	/// <summary>
	/// Normally the x-axis is plotted from minimum to maximum. Setting this instance
	/// variable causes the x-axis to be plotted from maximum to minimum. Note that
	/// boolean always applies to the x-axis even if ExchangeAxes is set.
	/// </summary>
	public virtual void ReverseXAxisOn()
	{
		vtkXYPlotActor_ReverseXAxisOn_136(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_ReverseYAxisOff_137(HandleRef pThis);

	/// <summary>
	/// Normally the y-axis is plotted from minimum to maximum. Setting this instance
	/// variable causes the y-axis to be plotted from maximum to minimum. Note that
	/// boolean always applies to the y-axis even if ExchangeAxes is set.
	/// </summary>
	public virtual void ReverseYAxisOff()
	{
		vtkXYPlotActor_ReverseYAxisOff_137(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_ReverseYAxisOn_138(HandleRef pThis);

	/// <summary>
	/// Normally the y-axis is plotted from minimum to maximum. Setting this instance
	/// variable causes the y-axis to be plotted from maximum to minimum. Note that
	/// boolean always applies to the y-axis even if ExchangeAxes is set.
	/// </summary>
	public virtual void ReverseYAxisOn()
	{
		vtkXYPlotActor_ReverseYAxisOn_138(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkXYPlotActor_SafeDownCast_139(HandleRef o, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public new static vtkXYPlotActor SafeDownCast(vtkObjectBase o)
	{
		vtkXYPlotActor vtkXYPlotActor2 = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkXYPlotActor_SafeDownCast_139(o?.GetCppThis() ?? default(HandleRef), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			vtkXYPlotActor2 = (vtkXYPlotActor)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var found);
			if (found)
			{
				vtkXYPlotActor2.Register(null);
			}
		}
		return vtkXYPlotActor2;
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAdjustTitlePosition_140(HandleRef pThis, int _arg);

	/// <summary>
	/// If true, the xyplot actor will adjust the position of the title
	/// automatically to be upper-middle. Default is true.
	/// </summary>
	public virtual void SetAdjustTitlePosition(int _arg)
	{
		vtkXYPlotActor_SetAdjustTitlePosition_140(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAdjustTitlePositionMode_141(HandleRef pThis, int _arg);

	/// <summary>
	/// If AdjustTitlePosition is true, the xyplot actor will
	/// adjust the position of the title automatically depending on the
	/// given mode, the mode is a combination of the Alignment flags.
	/// by default: vtkXYPlotActor::AlignHCenter | vtkXYPlotActor::Top
	/// | vtkXYPlotActor::AlignAxisVCenter
	/// </summary>
	public virtual void SetAdjustTitlePositionMode(int _arg)
	{
		vtkXYPlotActor_SetAdjustTitlePositionMode_141(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAdjustXLabels_142(HandleRef pThis, int adjust);

	/// <summary>
	/// Set/Get the flag that controls whether the labels and ticks are
	/// adjusted for "nice" numerical values to make it easier to read
	/// the labels. The adjustment is based in the Range instance variable.
	/// Call GetAdjustedRange and GetAdjustedNumberOfLabels to get the adjusted
	/// range and number of labels.
	/// </summary>
	public void SetAdjustXLabels(int adjust)
	{
		vtkXYPlotActor_SetAdjustXLabels_142(GetCppThis(), adjust);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAdjustYLabels_143(HandleRef pThis, int adjust);

	/// <summary>
	/// Set/Get the flag that controls whether the labels and ticks are
	/// adjusted for "nice" numerical values to make it easier to read
	/// the labels. The adjustment is based in the Range instance variable.
	/// Call GetAdjustedRange and GetAdjustedNumberOfLabels to get the adjusted
	/// range and number of labels.
	/// </summary>
	public void SetAdjustYLabels(int adjust)
	{
		vtkXYPlotActor_SetAdjustYLabels_143(GetCppThis(), adjust);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAxisLabelBold_144(HandleRef pThis, int arg0);

	/// <summary>
	/// Set axis label properties
	/// </summary>
	public virtual void SetAxisLabelBold(int arg0)
	{
		vtkXYPlotActor_SetAxisLabelBold_144(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAxisLabelColor_145(HandleRef pThis, double arg0, double arg1, double arg2);

	/// <summary>
	/// Set axis label properties
	/// </summary>
	public virtual void SetAxisLabelColor(double arg0, double arg1, double arg2)
	{
		vtkXYPlotActor_SetAxisLabelColor_145(GetCppThis(), arg0, arg1, arg2);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAxisLabelFontFamily_146(HandleRef pThis, int arg0);

	/// <summary>
	/// Set axis label properties
	/// </summary>
	public virtual void SetAxisLabelFontFamily(int arg0)
	{
		vtkXYPlotActor_SetAxisLabelFontFamily_146(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAxisLabelFontSize_147(HandleRef pThis, int arg0);

	/// <summary>
	/// Set axis label properties
	/// </summary>
	public virtual void SetAxisLabelFontSize(int arg0)
	{
		vtkXYPlotActor_SetAxisLabelFontSize_147(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAxisLabelItalic_148(HandleRef pThis, int arg0);

	/// <summary>
	/// Set axis label properties
	/// </summary>
	public virtual void SetAxisLabelItalic(int arg0)
	{
		vtkXYPlotActor_SetAxisLabelItalic_148(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAxisLabelJustification_149(HandleRef pThis, int arg0);

	/// <summary>
	/// Set axis label properties
	/// </summary>
	public virtual void SetAxisLabelJustification(int arg0)
	{
		vtkXYPlotActor_SetAxisLabelJustification_149(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAxisLabelShadow_150(HandleRef pThis, int arg0);

	/// <summary>
	/// Set axis label properties
	/// </summary>
	public virtual void SetAxisLabelShadow(int arg0)
	{
		vtkXYPlotActor_SetAxisLabelShadow_150(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAxisLabelTextProperty_151(HandleRef pThis, HandleRef p);

	/// <summary>
	/// Set/Get the labels text property of all axes. Note that each axis can
	/// be controlled individually through the GetX/YAxisActor2D() methods.
	/// </summary>
	public virtual void SetAxisLabelTextProperty(vtkTextProperty p)
	{
		vtkXYPlotActor_SetAxisLabelTextProperty_151(GetCppThis(), p?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAxisLabelVerticalJustification_152(HandleRef pThis, int arg0);

	/// <summary>
	/// Set axis label properties
	/// </summary>
	public virtual void SetAxisLabelVerticalJustification(int arg0)
	{
		vtkXYPlotActor_SetAxisLabelVerticalJustification_152(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAxisTitleBold_153(HandleRef pThis, int arg0);

	/// <summary>
	/// Set axis title properties
	/// </summary>
	public virtual void SetAxisTitleBold(int arg0)
	{
		vtkXYPlotActor_SetAxisTitleBold_153(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAxisTitleColor_154(HandleRef pThis, double arg0, double arg1, double arg2);

	/// <summary>
	/// Set axis title properties
	/// </summary>
	public virtual void SetAxisTitleColor(double arg0, double arg1, double arg2)
	{
		vtkXYPlotActor_SetAxisTitleColor_154(GetCppThis(), arg0, arg1, arg2);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAxisTitleFontFamily_155(HandleRef pThis, int arg0);

	/// <summary>
	/// Set axis title properties
	/// </summary>
	public virtual void SetAxisTitleFontFamily(int arg0)
	{
		vtkXYPlotActor_SetAxisTitleFontFamily_155(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAxisTitleFontSize_156(HandleRef pThis, int arg0);

	/// <summary>
	/// Set axis title properties
	/// </summary>
	public virtual void SetAxisTitleFontSize(int arg0)
	{
		vtkXYPlotActor_SetAxisTitleFontSize_156(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAxisTitleItalic_157(HandleRef pThis, int arg0);

	/// <summary>
	/// Set axis title properties
	/// </summary>
	public virtual void SetAxisTitleItalic(int arg0)
	{
		vtkXYPlotActor_SetAxisTitleItalic_157(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAxisTitleJustification_158(HandleRef pThis, int arg0);

	/// <summary>
	/// Set axis title properties
	/// </summary>
	public virtual void SetAxisTitleJustification(int arg0)
	{
		vtkXYPlotActor_SetAxisTitleJustification_158(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAxisTitleShadow_159(HandleRef pThis, int arg0);

	/// <summary>
	/// Set axis title properties
	/// </summary>
	public virtual void SetAxisTitleShadow(int arg0)
	{
		vtkXYPlotActor_SetAxisTitleShadow_159(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAxisTitleTextProperty_160(HandleRef pThis, HandleRef p);

	/// <summary>
	/// Set/Get the title text property of all axes. Note that each axis can
	/// be controlled individually through the GetX/YAxisActor2D() methods.
	/// </summary>
	public virtual void SetAxisTitleTextProperty(vtkTextProperty p)
	{
		vtkXYPlotActor_SetAxisTitleTextProperty_160(GetCppThis(), p?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetAxisTitleVerticalJustification_161(HandleRef pThis, int arg0);

	/// <summary>
	/// Set axis title properties
	/// </summary>
	public virtual void SetAxisTitleVerticalJustification(int arg0)
	{
		vtkXYPlotActor_SetAxisTitleVerticalJustification_161(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetBorder_162(HandleRef pThis, int _arg);

	/// <summary>
	/// Set/Get the spacing between the plot window and the plot. The value
	/// is specified in pixels.
	/// </summary>
	public virtual void SetBorder(int _arg)
	{
		vtkXYPlotActor_SetBorder_162(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetChartBorder_163(HandleRef pThis, int _arg);

	/// <summary>
	/// Set/Get the flag that controls whether a box will be drawn/filled
	/// corresponding to the legend box.
	/// </summary>
	public virtual void SetChartBorder(int _arg)
	{
		vtkXYPlotActor_SetChartBorder_163(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetChartBox_164(HandleRef pThis, int _arg);

	/// <summary>
	/// Set/Get the flag that controls whether a box will be drawn/filled
	/// corresponding to the chart box.
	/// </summary>
	public virtual void SetChartBox(int _arg)
	{
		vtkXYPlotActor_SetChartBox_164(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetDataObjectPlotMode_165(HandleRef pThis, int _arg);

	/// <summary>
	/// Indicate whether to plot rows or columns. If plotting rows, then
	/// the dependent variables is taken from a specified row,
	/// versus rows (y).
	/// </summary>
	public virtual void SetDataObjectPlotMode(int _arg)
	{
		vtkXYPlotActor_SetDataObjectPlotMode_165(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetDataObjectPlotModeToColumns_166(HandleRef pThis);

	/// <summary>
	/// Indicate whether to plot rows or columns. If plotting rows, then
	/// the dependent variables is taken from a specified row,
	/// versus rows (y).
	/// </summary>
	public void SetDataObjectPlotModeToColumns()
	{
		vtkXYPlotActor_SetDataObjectPlotModeToColumns_166(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetDataObjectPlotModeToRows_167(HandleRef pThis);

	/// <summary>
	/// Indicate whether to plot rows or columns. If plotting rows, then
	/// the dependent variables is taken from a specified row,
	/// versus rows (y).
	/// </summary>
	public void SetDataObjectPlotModeToRows()
	{
		vtkXYPlotActor_SetDataObjectPlotModeToRows_167(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetDataObjectXComponent_168(HandleRef pThis, int i, int comp);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// independent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectXComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public void SetDataObjectXComponent(int i, int comp)
	{
		vtkXYPlotActor_SetDataObjectXComponent_168(GetCppThis(), i, comp);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetDataObjectYComponent_169(HandleRef pThis, int i, int comp);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public void SetDataObjectYComponent(int i, int comp)
	{
		vtkXYPlotActor_SetDataObjectYComponent_169(GetCppThis(), i, comp);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetExchangeAxes_170(HandleRef pThis, int _arg);

	/// <summary>
	/// Enable/Disable exchange of the x-y axes (i.e., what was x becomes y, and
	/// vice-versa). Exchanging axes affects the labeling as well.
	/// </summary>
	public virtual void SetExchangeAxes(int _arg)
	{
		vtkXYPlotActor_SetExchangeAxes_170(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetGlyphSize_171(HandleRef pThis, double _arg);

	/// <summary>
	/// Set/Get the factor that controls how big glyphs are in the plot.
	/// The number is expressed as a fraction of the length of the diagonal
	/// of the plot bounding box.
	/// </summary>
	public virtual void SetGlyphSize(double _arg)
	{
		vtkXYPlotActor_SetGlyphSize_171(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetLabelFormat_172(HandleRef pThis, string arg0);

	/// <summary>
	/// Set/Get the format with which to print the labels . This sets both X
	/// and Y label formats. GetLabelFormat() returns X label format.
	/// </summary>
	public virtual void SetLabelFormat(string arg0)
	{
		vtkXYPlotActor_SetLabelFormat_172(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetLegend_173(HandleRef pThis, int _arg);

	/// <summary>
	/// Enable/Disable the creation of a legend. If on, the legend labels will
	/// be created automatically unless the per plot legend symbol has been
	/// set.
	/// </summary>
	public virtual void SetLegend(int _arg)
	{
		vtkXYPlotActor_SetLegend_173(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetLegendBackgroundColor_174(HandleRef pThis, double arg0, double arg1, double arg2);

	/// <summary>
	/// Set legend properties
	/// </summary>
	public virtual void SetLegendBackgroundColor(double arg0, double arg1, double arg2)
	{
		vtkXYPlotActor_SetLegendBackgroundColor_174(GetCppThis(), arg0, arg1, arg2);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetLegendBorder_175(HandleRef pThis, int arg0);

	/// <summary>
	/// Set legend properties
	/// </summary>
	public virtual void SetLegendBorder(int arg0)
	{
		vtkXYPlotActor_SetLegendBorder_175(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetLegendBox_176(HandleRef pThis, int arg0);

	/// <summary>
	/// Set legend properties
	/// </summary>
	public virtual void SetLegendBox(int arg0)
	{
		vtkXYPlotActor_SetLegendBox_176(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetLegendPosition_177(HandleRef pThis, double _arg1, double _arg2);

	/// <summary>
	/// Use these methods to control the position of the legend. The variables
	/// LegendPosition and LegendPosition2 define the lower-left and upper-right
	/// position of the legend. The coordinates are expressed as normalized
	/// values with respect to the rectangle defined by PositionCoordinate and
	/// Position2Coordinate. Note that LegendPosition2 is relative to
	/// LegendPosition.
	/// </summary>
	public virtual void SetLegendPosition(double _arg1, double _arg2)
	{
		vtkXYPlotActor_SetLegendPosition_177(GetCppThis(), _arg1, _arg2);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetLegendPosition_178(HandleRef pThis, IntPtr _arg);

	/// <summary>
	/// Use these methods to control the position of the legend. The variables
	/// LegendPosition and LegendPosition2 define the lower-left and upper-right
	/// position of the legend. The coordinates are expressed as normalized
	/// values with respect to the rectangle defined by PositionCoordinate and
	/// Position2Coordinate. Note that LegendPosition2 is relative to
	/// LegendPosition.
	/// </summary>
	public void SetLegendPosition(IntPtr _arg)
	{
		vtkXYPlotActor_SetLegendPosition_178(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetLegendPosition2_179(HandleRef pThis, double _arg1, double _arg2);

	/// <summary>
	/// Use these methods to control the position of the legend. The variables
	/// LegendPosition and LegendPosition2 define the lower-left and upper-right
	/// position of the legend. The coordinates are expressed as normalized
	/// values with respect to the rectangle defined by PositionCoordinate and
	/// Position2Coordinate. Note that LegendPosition2 is relative to
	/// LegendPosition.
	/// </summary>
	public virtual void SetLegendPosition2(double _arg1, double _arg2)
	{
		vtkXYPlotActor_SetLegendPosition2_179(GetCppThis(), _arg1, _arg2);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetLegendPosition2_180(HandleRef pThis, IntPtr _arg);

	/// <summary>
	/// Use these methods to control the position of the legend. The variables
	/// LegendPosition and LegendPosition2 define the lower-left and upper-right
	/// position of the legend. The coordinates are expressed as normalized
	/// values with respect to the rectangle defined by PositionCoordinate and
	/// Position2Coordinate. Note that LegendPosition2 is relative to
	/// LegendPosition.
	/// </summary>
	public void SetLegendPosition2(IntPtr _arg)
	{
		vtkXYPlotActor_SetLegendPosition2_180(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetLegendUseBackground_181(HandleRef pThis, int arg0);

	/// <summary>
	/// Set legend properties
	/// </summary>
	public virtual void SetLegendUseBackground(int arg0)
	{
		vtkXYPlotActor_SetLegendUseBackground_181(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetLineWidth_182(HandleRef pThis, double arg0);

	/// <summary>
	/// Set plot properties
	/// </summary>
	public virtual void SetLineWidth(double arg0)
	{
		vtkXYPlotActor_SetLineWidth_182(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetLogx_183(HandleRef pThis, int _arg);

	/// <summary>
	/// Enable/Disable plotting of Log of x-values.
	/// </summary>
	public virtual void SetLogx(int _arg)
	{
		vtkXYPlotActor_SetLogx_183(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetNumberOfLabels_184(HandleRef pThis, int num);

	/// <summary>
	/// Set/Get the number of annotation labels to show along the x and y axes.
	/// This values is a suggestion: the number of labels may vary depending
	/// on the particulars of the data. The convenience method
	/// SetNumberOfLabels() sets the number of x and y labels to the same value.
	/// </summary>
	public void SetNumberOfLabels(int num)
	{
		vtkXYPlotActor_SetNumberOfLabels_184(GetCppThis(), num);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetNumberOfXLabels_185(HandleRef pThis, int _arg);

	/// <summary>
	/// Set/Get the number of annotation labels to show along the x and y axes.
	/// This values is a suggestion: the number of labels may vary depending
	/// on the particulars of the data. The convenience method
	/// SetNumberOfLabels() sets the number of x and y labels to the same value.
	/// </summary>
	public virtual void SetNumberOfXLabels(int _arg)
	{
		vtkXYPlotActor_SetNumberOfXLabels_185(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetNumberOfXMinorTicks_186(HandleRef pThis, int num);

	/// <summary>
	/// Set/Get the number of minor ticks in X or Y.
	/// </summary>
	public void SetNumberOfXMinorTicks(int num)
	{
		vtkXYPlotActor_SetNumberOfXMinorTicks_186(GetCppThis(), num);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetNumberOfYLabels_187(HandleRef pThis, int _arg);

	/// <summary>
	/// Set/Get the number of annotation labels to show along the x and y axes.
	/// This values is a suggestion: the number of labels may vary depending
	/// on the particulars of the data. The convenience method
	/// SetNumberOfLabels() sets the number of x and y labels to the same value.
	/// </summary>
	public virtual void SetNumberOfYLabels(int _arg)
	{
		vtkXYPlotActor_SetNumberOfYLabels_187(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetNumberOfYMinorTicks_188(HandleRef pThis, int num);

	/// <summary>
	/// Set/Get the number of minor ticks in X or Y.
	/// </summary>
	public void SetNumberOfYMinorTicks(int num)
	{
		vtkXYPlotActor_SetNumberOfYMinorTicks_188(GetCppThis(), num);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetPlotColor_189(HandleRef pThis, int i, double r, double g, double b);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public void SetPlotColor(int i, double r, double g, double b)
	{
		vtkXYPlotActor_SetPlotColor_189(GetCppThis(), i, r, g, b);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetPlotColor_190(HandleRef pThis, int i, IntPtr color);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public void SetPlotColor(int i, IntPtr color)
	{
		vtkXYPlotActor_SetPlotColor_190(GetCppThis(), i, color);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetPlotCoordinate_191(HandleRef pThis, double _arg1, double _arg2);

	/// <summary>
	/// An alternate form of ViewportToPlotCoordinate() above. This method
	/// inputs the viewport coordinate pair (defined by the ivar
	/// ViewportCoordinate)and then stores them in the ivar PlotCoordinate.
	/// </summary>
	public virtual void SetPlotCoordinate(double _arg1, double _arg2)
	{
		vtkXYPlotActor_SetPlotCoordinate_191(GetCppThis(), _arg1, _arg2);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetPlotCoordinate_192(HandleRef pThis, IntPtr _arg);

	/// <summary>
	/// An alternate form of ViewportToPlotCoordinate() above. This method
	/// inputs the viewport coordinate pair (defined by the ivar
	/// ViewportCoordinate)and then stores them in the ivar PlotCoordinate.
	/// </summary>
	public void SetPlotCoordinate(IntPtr _arg)
	{
		vtkXYPlotActor_SetPlotCoordinate_192(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetPlotCurveLines_193(HandleRef pThis, int _arg);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public virtual void SetPlotCurveLines(int _arg)
	{
		vtkXYPlotActor_SetPlotCurveLines_193(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetPlotCurvePoints_194(HandleRef pThis, int _arg);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public virtual void SetPlotCurvePoints(int _arg)
	{
		vtkXYPlotActor_SetPlotCurvePoints_194(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetPlotGlyphType_195(HandleRef pThis, int arg0, int arg1);

	/// <summary>
	/// Set plot properties
	/// </summary>
	public virtual void SetPlotGlyphType(int arg0, int arg1)
	{
		vtkXYPlotActor_SetPlotGlyphType_195(GetCppThis(), arg0, arg1);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetPlotLabel_196(HandleRef pThis, int i, string label);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public void SetPlotLabel(int i, string label)
	{
		vtkXYPlotActor_SetPlotLabel_196(GetCppThis(), i, label);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetPlotLines_197(HandleRef pThis, int _arg);

	/// <summary>
	/// Set/Get whether the lines are rendered.  The line width can be set in
	/// the property object.
	/// </summary>
	public virtual void SetPlotLines(int _arg)
	{
		vtkXYPlotActor_SetPlotLines_197(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetPlotLines_198(HandleRef pThis, int i, int arg1);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public void SetPlotLines(int i, int arg1)
	{
		vtkXYPlotActor_SetPlotLines_198(GetCppThis(), i, arg1);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetPlotPoints_199(HandleRef pThis, int _arg);

	/// <summary>
	/// Set/Get whether the points are rendered.  The point size can be set in
	/// the property object. This is a global flag which affects the plot only
	/// if per curve symbols are not defined.
	/// </summary>
	public virtual void SetPlotPoints(int _arg)
	{
		vtkXYPlotActor_SetPlotPoints_199(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetPlotPoints_200(HandleRef pThis, int i, int arg1);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public void SetPlotPoints(int i, int arg1)
	{
		vtkXYPlotActor_SetPlotPoints_200(GetCppThis(), i, arg1);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetPlotRange_201(HandleRef pThis, double xmin, double ymin, double xmax, double ymax);

	/// <summary>
	/// Set the plot range (range of independent and dependent variables)
	/// to plot. Data outside of the range will be clipped. If the plot
	/// range of either the x or y variables is set to (v1,v2), where
	/// v1 == v2, then the range will be computed automatically. Note that
	/// the x-range values should be consistent with the way the independent
	/// variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
	/// </summary>
	public void SetPlotRange(double xmin, double ymin, double xmax, double ymax)
	{
		vtkXYPlotActor_SetPlotRange_201(GetCppThis(), xmin, ymin, xmax, ymax);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetPlotSymbol_202(HandleRef pThis, int i, HandleRef input);

	/// <summary>
	/// Specify which component of the input data object to use as the
	/// dependent variable for the ith input data object. (This ivar is
	/// ignored if plotting the index.) Note that the value is interpreted
	/// differently depending on DataObjectPlotMode. If the mode is Rows, then
	/// the value of DataObjectYComponent is the row number; otherwise it's the
	/// column number.
	/// </summary>
	public void SetPlotSymbol(int i, vtkPolyData input)
	{
		vtkXYPlotActor_SetPlotSymbol_202(GetCppThis(), i, input?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetPointComponent_203(HandleRef pThis, int i, int comp);

	/// <summary>
	/// If plotting points by value, which component to use to determine the
	/// value. This sets a value per each input dataset (i.e., the ith dataset).
	/// </summary>
	public void SetPointComponent(int i, int comp)
	{
		vtkXYPlotActor_SetPointComponent_203(GetCppThis(), i, comp);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetReferenceXValue_204(HandleRef pThis, double _arg);

	/// <summary>
	/// Set/Get the value for the X reference line
	/// </summary>
	public virtual void SetReferenceXValue(double _arg)
	{
		vtkXYPlotActor_SetReferenceXValue_204(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetReferenceYValue_205(HandleRef pThis, double _arg);

	/// <summary>
	/// Set/Get the value for the Y reference line
	/// </summary>
	public virtual void SetReferenceYValue(double _arg)
	{
		vtkXYPlotActor_SetReferenceYValue_205(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetReverseXAxis_206(HandleRef pThis, int _arg);

	/// <summary>
	/// Normally the x-axis is plotted from minimum to maximum. Setting this instance
	/// variable causes the x-axis to be plotted from maximum to minimum. Note that
	/// boolean always applies to the x-axis even if ExchangeAxes is set.
	/// </summary>
	public virtual void SetReverseXAxis(int _arg)
	{
		vtkXYPlotActor_SetReverseXAxis_206(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetReverseYAxis_207(HandleRef pThis, int _arg);

	/// <summary>
	/// Normally the y-axis is plotted from minimum to maximum. Setting this instance
	/// variable causes the y-axis to be plotted from maximum to minimum. Note that
	/// boolean always applies to the y-axis even if ExchangeAxes is set.
	/// </summary>
	public virtual void SetReverseYAxis(int _arg)
	{
		vtkXYPlotActor_SetReverseYAxis_207(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetShowReferenceXLine_208(HandleRef pThis, int _arg);

	/// <summary>
	/// Set/Get if the X reference line is visible. hidden by default
	/// </summary>
	public virtual void SetShowReferenceXLine(int _arg)
	{
		vtkXYPlotActor_SetShowReferenceXLine_208(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetShowReferenceYLine_209(HandleRef pThis, int _arg);

	/// <summary>
	/// Set/Get if the Y reference line is visible. hidden by default
	/// </summary>
	public virtual void SetShowReferenceYLine(int _arg)
	{
		vtkXYPlotActor_SetShowReferenceYLine_209(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetTitle_210(HandleRef pThis, string _arg);

	/// <summary>
	/// Set/Get the title of the x-y plot.
	/// </summary>
	public virtual void SetTitle(string _arg)
	{
		vtkXYPlotActor_SetTitle_210(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetTitleBold_211(HandleRef pThis, int arg0);

	/// <summary>
	/// Set title properties
	/// </summary>
	public virtual void SetTitleBold(int arg0)
	{
		vtkXYPlotActor_SetTitleBold_211(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetTitleColor_212(HandleRef pThis, double arg0, double arg1, double arg2);

	/// <summary>
	/// Set title properties
	/// </summary>
	public virtual void SetTitleColor(double arg0, double arg1, double arg2)
	{
		vtkXYPlotActor_SetTitleColor_212(GetCppThis(), arg0, arg1, arg2);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetTitleFontFamily_213(HandleRef pThis, int arg0);

	/// <summary>
	/// Set title properties
	/// </summary>
	public virtual void SetTitleFontFamily(int arg0)
	{
		vtkXYPlotActor_SetTitleFontFamily_213(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetTitleFontSize_214(HandleRef pThis, int arg0);

	/// <summary>
	/// Set title properties
	/// </summary>
	public virtual void SetTitleFontSize(int arg0)
	{
		vtkXYPlotActor_SetTitleFontSize_214(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetTitleItalic_215(HandleRef pThis, int arg0);

	/// <summary>
	/// Set title properties
	/// </summary>
	public virtual void SetTitleItalic(int arg0)
	{
		vtkXYPlotActor_SetTitleItalic_215(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetTitleJustification_216(HandleRef pThis, int arg0);

	/// <summary>
	/// Set title properties
	/// </summary>
	public virtual void SetTitleJustification(int arg0)
	{
		vtkXYPlotActor_SetTitleJustification_216(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetTitlePosition_217(HandleRef pThis, double _arg1, double _arg2);

	/// <summary>
	/// Set/Get the position of the title. This has no effect if
	/// AdjustTitlePosition is true.
	/// </summary>
	public virtual void SetTitlePosition(double _arg1, double _arg2)
	{
		vtkXYPlotActor_SetTitlePosition_217(GetCppThis(), _arg1, _arg2);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetTitlePosition_218(HandleRef pThis, IntPtr _arg);

	/// <summary>
	/// Set/Get the position of the title. This has no effect if
	/// AdjustTitlePosition is true.
	/// </summary>
	public void SetTitlePosition(IntPtr _arg)
	{
		vtkXYPlotActor_SetTitlePosition_218(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetTitleShadow_219(HandleRef pThis, int arg0);

	/// <summary>
	/// Set title properties
	/// </summary>
	public virtual void SetTitleShadow(int arg0)
	{
		vtkXYPlotActor_SetTitleShadow_219(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetTitleTextProperty_220(HandleRef pThis, HandleRef p);

	/// <summary>
	/// Set/Get the title text property.
	/// </summary>
	public virtual void SetTitleTextProperty(vtkTextProperty p)
	{
		vtkXYPlotActor_SetTitleTextProperty_220(GetCppThis(), p?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetTitleVerticalJustification_221(HandleRef pThis, int arg0);

	/// <summary>
	/// Set title properties
	/// </summary>
	public virtual void SetTitleVerticalJustification(int arg0)
	{
		vtkXYPlotActor_SetTitleVerticalJustification_221(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetViewportCoordinate_222(HandleRef pThis, double _arg1, double _arg2);

	/// <summary>
	/// An alternate form of PlotToViewportCoordinate() above. This method
	/// inputs the plot coordinate pair (defined in the ivar PlotCoordinate)
	/// and then stores them in the ivar ViewportCoordinate. (This method
	/// can be wrapped.)
	/// </summary>
	public virtual void SetViewportCoordinate(double _arg1, double _arg2)
	{
		vtkXYPlotActor_SetViewportCoordinate_222(GetCppThis(), _arg1, _arg2);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetViewportCoordinate_223(HandleRef pThis, IntPtr _arg);

	/// <summary>
	/// An alternate form of PlotToViewportCoordinate() above. This method
	/// inputs the plot coordinate pair (defined in the ivar PlotCoordinate)
	/// and then stores them in the ivar ViewportCoordinate. (This method
	/// can be wrapped.)
	/// </summary>
	public void SetViewportCoordinate(IntPtr _arg)
	{
		vtkXYPlotActor_SetViewportCoordinate_223(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetXAxisColor_224(HandleRef pThis, double arg0, double arg1, double arg2);

	/// <summary>
	/// Set axes properties
	/// </summary>
	public virtual void SetXAxisColor(double arg0, double arg1, double arg2)
	{
		vtkXYPlotActor_SetXAxisColor_224(GetCppThis(), arg0, arg1, arg2);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetXLabelFormat_225(HandleRef pThis, string arg0);

	/// <summary>
	/// Set/Get the format with which to print the X label.
	/// </summary>
	public virtual void SetXLabelFormat(string arg0)
	{
		vtkXYPlotActor_SetXLabelFormat_225(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetXRange_226(HandleRef pThis, double _arg1, double _arg2);

	/// <summary>
	/// Set the plot range (range of independent and dependent variables)
	/// to plot. Data outside of the range will be clipped. If the plot
	/// range of either the x or y variables is set to (v1,v2), where
	/// v1 == v2, then the range will be computed automatically. Note that
	/// the x-range values should be consistent with the way the independent
	/// variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
	/// </summary>
	public virtual void SetXRange(double _arg1, double _arg2)
	{
		vtkXYPlotActor_SetXRange_226(GetCppThis(), _arg1, _arg2);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetXRange_227(HandleRef pThis, IntPtr _arg);

	/// <summary>
	/// Set the plot range (range of independent and dependent variables)
	/// to plot. Data outside of the range will be clipped. If the plot
	/// range of either the x or y variables is set to (v1,v2), where
	/// v1 == v2, then the range will be computed automatically. Note that
	/// the x-range values should be consistent with the way the independent
	/// variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
	/// </summary>
	public void SetXRange(IntPtr _arg)
	{
		vtkXYPlotActor_SetXRange_227(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetXTitle_228(HandleRef pThis, string _arg);

	/// <summary>
	/// Set/Get the title of the x axis
	/// </summary>
	public virtual void SetXTitle(string _arg)
	{
		vtkXYPlotActor_SetXTitle_228(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetXTitlePosition_229(HandleRef pThis, double position);

	/// <summary>
	/// Set/Get the position of the title of X axis.
	/// </summary>
	public void SetXTitlePosition(double position)
	{
		vtkXYPlotActor_SetXTitlePosition_229(GetCppThis(), position);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetXValues_230(HandleRef pThis, int _arg);

	/// <summary>
	/// Specify how the independent (x) variable is computed from the points.
	/// The independent variable can be the scalar/point index (i.e., point id),
	/// the accumulated arc length along the points, the normalized arc length,
	/// or by component value. If plotting datasets (e.g., points), the value
	/// that is used is specified by the PointComponent ivar.  (Note: these
	/// methods also control how field data is plotted. Field data is usually
	/// plotted by value or index, if plotting length 1-dimensional length
	/// measures are used.)
	/// </summary>
	public virtual void SetXValues(int _arg)
	{
		vtkXYPlotActor_SetXValues_230(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetXValuesToArcLength_231(HandleRef pThis);

	/// <summary>
	/// Specify how the independent (x) variable is computed from the points.
	/// The independent variable can be the scalar/point index (i.e., point id),
	/// the accumulated arc length along the points, the normalized arc length,
	/// or by component value. If plotting datasets (e.g., points), the value
	/// that is used is specified by the PointComponent ivar.  (Note: these
	/// methods also control how field data is plotted. Field data is usually
	/// plotted by value or index, if plotting length 1-dimensional length
	/// measures are used.)
	/// </summary>
	public void SetXValuesToArcLength()
	{
		vtkXYPlotActor_SetXValuesToArcLength_231(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetXValuesToIndex_232(HandleRef pThis);

	/// <summary>
	/// Specify how the independent (x) variable is computed from the points.
	/// The independent variable can be the scalar/point index (i.e., point id),
	/// the accumulated arc length along the points, the normalized arc length,
	/// or by component value. If plotting datasets (e.g., points), the value
	/// that is used is specified by the PointComponent ivar.  (Note: these
	/// methods also control how field data is plotted. Field data is usually
	/// plotted by value or index, if plotting length 1-dimensional length
	/// measures are used.)
	/// </summary>
	public void SetXValuesToIndex()
	{
		vtkXYPlotActor_SetXValuesToIndex_232(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetXValuesToNormalizedArcLength_233(HandleRef pThis);

	/// <summary>
	/// Specify how the independent (x) variable is computed from the points.
	/// The independent variable can be the scalar/point index (i.e., point id),
	/// the accumulated arc length along the points, the normalized arc length,
	/// or by component value. If plotting datasets (e.g., points), the value
	/// that is used is specified by the PointComponent ivar.  (Note: these
	/// methods also control how field data is plotted. Field data is usually
	/// plotted by value or index, if plotting length 1-dimensional length
	/// measures are used.)
	/// </summary>
	public void SetXValuesToNormalizedArcLength()
	{
		vtkXYPlotActor_SetXValuesToNormalizedArcLength_233(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetXValuesToValue_234(HandleRef pThis);

	/// <summary>
	/// Specify how the independent (x) variable is computed from the points.
	/// The independent variable can be the scalar/point index (i.e., point id),
	/// the accumulated arc length along the points, the normalized arc length,
	/// or by component value. If plotting datasets (e.g., points), the value
	/// that is used is specified by the PointComponent ivar.  (Note: these
	/// methods also control how field data is plotted. Field data is usually
	/// plotted by value or index, if plotting length 1-dimensional length
	/// measures are used.)
	/// </summary>
	public void SetXValuesToValue()
	{
		vtkXYPlotActor_SetXValuesToValue_234(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetYAxisColor_235(HandleRef pThis, double arg0, double arg1, double arg2);

	/// <summary>
	/// Set axes properties
	/// </summary>
	public virtual void SetYAxisColor(double arg0, double arg1, double arg2)
	{
		vtkXYPlotActor_SetYAxisColor_235(GetCppThis(), arg0, arg1, arg2);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetYLabelFormat_236(HandleRef pThis, string arg0);

	/// <summary>
	/// Set/Get the format with which to print the Y label.
	/// </summary>
	public virtual void SetYLabelFormat(string arg0)
	{
		vtkXYPlotActor_SetYLabelFormat_236(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetYRange_237(HandleRef pThis, double _arg1, double _arg2);

	/// <summary>
	/// Set the plot range (range of independent and dependent variables)
	/// to plot. Data outside of the range will be clipped. If the plot
	/// range of either the x or y variables is set to (v1,v2), where
	/// v1 == v2, then the range will be computed automatically. Note that
	/// the x-range values should be consistent with the way the independent
	/// variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
	/// </summary>
	public virtual void SetYRange(double _arg1, double _arg2)
	{
		vtkXYPlotActor_SetYRange_237(GetCppThis(), _arg1, _arg2);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetYRange_238(HandleRef pThis, IntPtr _arg);

	/// <summary>
	/// Set the plot range (range of independent and dependent variables)
	/// to plot. Data outside of the range will be clipped. If the plot
	/// range of either the x or y variables is set to (v1,v2), where
	/// v1 == v2, then the range will be computed automatically. Note that
	/// the x-range values should be consistent with the way the independent
	/// variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
	/// </summary>
	public void SetYRange(IntPtr _arg)
	{
		vtkXYPlotActor_SetYRange_238(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetYTitle_239(HandleRef pThis, string arg0);

	/// <summary>
	/// Set/Get the title of the y axis
	/// </summary>
	public virtual void SetYTitle(string arg0)
	{
		vtkXYPlotActor_SetYTitle_239(GetCppThis(), arg0);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetYTitlePosition_240(HandleRef pThis, int _arg);

	/// <summary>
	/// Set/Get the position of the title of Y axis.
	/// </summary>
	public virtual void SetYTitlePosition(int _arg)
	{
		vtkXYPlotActor_SetYTitlePosition_240(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetYTitlePositionToHCenter_241(HandleRef pThis);

	/// <summary>
	/// Set/Get the position of the title of Y axis.
	/// </summary>
	public void SetYTitlePositionToHCenter()
	{
		vtkXYPlotActor_SetYTitlePositionToHCenter_241(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetYTitlePositionToTop_242(HandleRef pThis);

	/// <summary>
	/// Set/Get the position of the title of Y axis.
	/// </summary>
	public void SetYTitlePositionToTop()
	{
		vtkXYPlotActor_SetYTitlePositionToTop_242(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_SetYTitlePositionToVCenter_243(HandleRef pThis);

	/// <summary>
	/// Set/Get the position of the title of Y axis.
	/// </summary>
	public void SetYTitlePositionToVCenter()
	{
		vtkXYPlotActor_SetYTitlePositionToVCenter_243(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_ShowReferenceXLineOff_244(HandleRef pThis);

	/// <summary>
	/// Set/Get if the X reference line is visible. hidden by default
	/// </summary>
	public virtual void ShowReferenceXLineOff()
	{
		vtkXYPlotActor_ShowReferenceXLineOff_244(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_ShowReferenceXLineOn_245(HandleRef pThis);

	/// <summary>
	/// Set/Get if the X reference line is visible. hidden by default
	/// </summary>
	public virtual void ShowReferenceXLineOn()
	{
		vtkXYPlotActor_ShowReferenceXLineOn_245(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_ShowReferenceYLineOff_246(HandleRef pThis);

	/// <summary>
	/// Set/Get if the Y reference line is visible. hidden by default
	/// </summary>
	public virtual void ShowReferenceYLineOff()
	{
		vtkXYPlotActor_ShowReferenceYLineOff_246(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_ShowReferenceYLineOn_247(HandleRef pThis);

	/// <summary>
	/// Set/Get if the Y reference line is visible. hidden by default
	/// </summary>
	public virtual void ShowReferenceYLineOn()
	{
		vtkXYPlotActor_ShowReferenceYLineOn_247(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_ViewportToPlotCoordinate_248(HandleRef pThis, HandleRef viewport, ref double u, ref double v);

	/// <summary>
	/// Given a position within the viewport used by the plot, return the
	/// the plot coordinates (XAxis value, YAxis value)
	/// </summary>
	public void ViewportToPlotCoordinate(vtkViewport viewport, ref double u, ref double v)
	{
		vtkXYPlotActor_ViewportToPlotCoordinate_248(GetCppThis(), viewport?.GetCppThis() ?? default(HandleRef), ref u, ref v);
	}

	[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkXYPlotActor_ViewportToPlotCoordinate_249(HandleRef pThis, HandleRef viewport);

	/// <summary>
	/// An alternate form of ViewportToPlotCoordinate() above. This method
	/// inputs the viewport coordinate pair (defined by the ivar
	/// ViewportCoordinate)and then stores them in the ivar PlotCoordinate.
	/// </summary>
	public void ViewportToPlotCoordinate(vtkViewport viewport)
	{
		vtkXYPlotActor_ViewportToPlotCoordinate_249(GetCppThis(), viewport?.GetCppThis() ?? default(HandleRef));
	}
}
