using System;
using System.Reflection;
using System.Runtime.InteropServices;
using Kitware.mummy.Runtime;

namespace Kitware.VTK;

/// <summary>
///    vtkSMPMergePoints
/// </summary>
/// <remarks>
///    Class designed to help with merging of points in parallel
///
/// vtkSMPMergePoints is a subclass of vtkMergePoints designed to help
/// with merging of points generated by using multiple locators in parallel.
/// Its main functionality is provided by the Merge function. It also
/// has a few additional convenience functions.
/// Merge is thread safe as long as no two threads are merging the same
/// bin. The common way of using vtkSMPMergePoints is:
///  - Initialize with outLocator-&gt;InitializeMerge()
///  - Allocate points with outLocator-&gt;GetPoints()-&gt;Resize(numPts) (numPts should be &gt;= total number
/// of points)
///  - Do bunch of merging with outLocator-&gt;Merge(inLocator[i], ...) (this can be done in parallel as
/// long as no two bins are done at the same time)
///  - Fix the size of points with outLocator-&gt;FixSizeOfPointArray()
/// </remarks>
public class vtkSMPMergePoints : vtkMergePoints
{
	/// <summary>
	/// Automatically generated type registration mechanics.
	/// </summary>
	public new const string MRFullTypeName = "Kitware.VTK.vtkSMPMergePoints";

	/// <summary>
	/// Automatically generated type registration mechanics.
	/// </summary>
	public new static readonly string MRClassNameKey;

	/// <summary>
	/// Automatically generated type registration mechanics.
	/// </summary>
	static vtkSMPMergePoints()
	{
		MRClassNameKey = "class vtkSMPMergePoints";
		Methods.RegisterType(Assembly.GetExecutingAssembly(), MRClassNameKey, Type.GetType("Kitware.VTK.vtkSMPMergePoints"));
	}

	/// <summary>
	/// Automatically generated constructor - called from generated code.
	/// DO NOT call directly.
	/// </summary>
	public vtkSMPMergePoints(IntPtr rawCppThis, bool callDisposalMethod, bool strong)
		: base(rawCppThis, callDisposalMethod, strong)
	{
	}

	[DllImport("Kitware.VTK.FiltersSMP.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkSMPMergePoints_New(ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public new static vtkSMPMergePoints New()
	{
		vtkSMPMergePoints result = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkSMPMergePoints_New(ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			result = (vtkSMPMergePoints)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var _);
		}
		return result;
	}

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public vtkSMPMergePoints()
		: base(IntPtr.Zero, callDisposalMethod: false, strong: false)
	{
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr rawCppThis = vtkSMPMergePoints_New(ref mteStatus, ref mteIndex, ref rawRefCount);
		SetCppThis(rawCppThis, callDisposalMethod: true, (mteStatus != 0 && rawRefCount >= 2) ? true : false);
	}

	/// <summary>
	/// Automatically generated protected Dispose method - called from
	/// public Dispose or the C# destructor. DO NOT call directly.
	/// </summary>
	protected override void Dispose(bool disposing)
	{
		base.Dispose(disposing);
	}

	[DllImport("Kitware.VTK.FiltersSMP.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkSMPMergePoints_FixSizeOfPointArray_01(HandleRef pThis);

	/// <summary>
	/// At the of the merge, this can be called to set the MaxId of the
	/// points array to the maximum id in the locator. The current design
	/// usage is as follows:
	/// - Allocate points with points-&gt;Resize(numPts). NumPts should be &gt;= total number of points
	/// - Do bunch of merging with outLocator-&gt;Merge(inLocator[i], ...)
	/// - Fix the size of points with outLocator-&gt;FixSizeOfPointArray()
	/// </summary>
	public void FixSizeOfPointArray()
	{
		vtkSMPMergePoints_FixSizeOfPointArray_01(GetCppThis());
	}

	[DllImport("Kitware.VTK.FiltersSMP.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern long vtkSMPMergePoints_GetMaxId_02(HandleRef pThis);

	/// <summary>
	/// Returns the biggest id in the locator.
	/// </summary>
	public long GetMaxId()
	{
		return vtkSMPMergePoints_GetMaxId_02(GetCppThis());
	}

	[DllImport("Kitware.VTK.FiltersSMP.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern long vtkSMPMergePoints_GetNumberOfBuckets_03(HandleRef pThis);

	/// <summary>
	/// Returns the number of bins.
	/// </summary>
	public override long GetNumberOfBuckets()
	{
		return vtkSMPMergePoints_GetNumberOfBuckets_03(GetCppThis());
	}

	[DllImport("Kitware.VTK.FiltersSMP.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern long vtkSMPMergePoints_GetNumberOfGenerationsFromBase_04(HandleRef pThis, string type);

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public override long GetNumberOfGenerationsFromBase(string type)
	{
		return vtkSMPMergePoints_GetNumberOfGenerationsFromBase_04(GetCppThis(), type);
	}

	[DllImport("Kitware.VTK.FiltersSMP.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern long vtkSMPMergePoints_GetNumberOfGenerationsFromBaseType_05(string type);

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public new static long GetNumberOfGenerationsFromBaseType(string type)
	{
		return vtkSMPMergePoints_GetNumberOfGenerationsFromBaseType_05(type);
	}

	[DllImport("Kitware.VTK.FiltersSMP.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern long vtkSMPMergePoints_GetNumberOfIdsInBucket_06(HandleRef pThis, long idx);

	/// <summary>
	/// Returns the number of points in a bin.
	/// </summary>
	public long GetNumberOfIdsInBucket(long idx)
	{
		return vtkSMPMergePoints_GetNumberOfIdsInBucket_06(GetCppThis(), idx);
	}

	[DllImport("Kitware.VTK.FiltersSMP.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkSMPMergePoints_InitializeMerge_07(HandleRef pThis);

	/// <summary>
	/// This should be called from 1 thread before any call to Merge.
	/// </summary>
	public void InitializeMerge()
	{
		vtkSMPMergePoints_InitializeMerge_07(GetCppThis());
	}

	[DllImport("Kitware.VTK.FiltersSMP.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkSMPMergePoints_IsA_08(HandleRef pThis, string type);

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public override int IsA(string type)
	{
		return vtkSMPMergePoints_IsA_08(GetCppThis(), type);
	}

	[DllImport("Kitware.VTK.FiltersSMP.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkSMPMergePoints_IsTypeOf_09(string type);

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public new static int IsTypeOf(string type)
	{
		return vtkSMPMergePoints_IsTypeOf_09(type);
	}

	[DllImport("Kitware.VTK.FiltersSMP.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkSMPMergePoints_Merge_10(HandleRef pThis, HandleRef locator, long idx, HandleRef outPd, HandleRef inPd, HandleRef idList);

	/// <summary>
	/// Merge the points of one of the bins from the given locator to
	/// the same bin of the current locator. Note that this requires that
	/// the two locators have identical binning structures. This also
	/// merges point data given in the inPD argument to the outPd.
	/// Furthermore, it generates a map of the old ids of the input locator
	/// to the new ids. This is stored in the idList argument. The map
	/// is idList[oldId] = newId.
	/// </summary>
	public void Merge(vtkSMPMergePoints locator, long idx, vtkPointData outPd, vtkPointData inPd, vtkIdList idList)
	{
		vtkSMPMergePoints_Merge_10(GetCppThis(), locator?.GetCppThis() ?? default(HandleRef), idx, outPd?.GetCppThis() ?? default(HandleRef), inPd?.GetCppThis() ?? default(HandleRef), idList?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.FiltersSMP.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkSMPMergePoints_NewInstance_12(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public new vtkSMPMergePoints NewInstance()
	{
		vtkSMPMergePoints result = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkSMPMergePoints_NewInstance_12(GetCppThis(), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			result = (vtkSMPMergePoints)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var _);
		}
		return result;
	}

	[DllImport("Kitware.VTK.FiltersSMP.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkSMPMergePoints_SafeDownCast_13(HandleRef o, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public new static vtkSMPMergePoints SafeDownCast(vtkObjectBase o)
	{
		vtkSMPMergePoints vtkSMPMergePoints2 = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkSMPMergePoints_SafeDownCast_13(o?.GetCppThis() ?? default(HandleRef), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			vtkSMPMergePoints2 = (vtkSMPMergePoints)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var found);
			if (found)
			{
				vtkSMPMergePoints2.Register(null);
			}
		}
		return vtkSMPMergePoints2;
	}
}
