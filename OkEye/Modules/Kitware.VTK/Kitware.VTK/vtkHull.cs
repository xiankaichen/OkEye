using System;
using System.Reflection;
using System.Runtime.InteropServices;
using Kitware.mummy.Runtime;

namespace Kitware.VTK;

/// <summary>
///    vtkHull
/// </summary>
/// <remarks>
///    produce an n-sided convex hull
///
/// vtkHull is a filter which will produce an n-sided convex hull given a
/// set of n planes. (The convex hull bounds the input vtkPointSet data.)
/// The hull is generated by squeezing the planes towards the input
/// vtkPointSet, until the planes just touch the points. Then,
/// the resulting planes are used to generate a polyhedron (i.e., hull)
/// that is represented by triangles.
///
/// The n planes can be defined in a number of ways including 1) manually
/// specifying each plane; 2) choosing the six face planes of the input's
/// bounding box; 3) choosing the eight vertex planes of the input's
/// bounding box; 4) choosing the twelve edge planes of the input's
/// bounding box; and/or 5) using a recursively subdivided octahedron.
/// Note that when specifying planes, the plane normals should point
/// outside of the convex region.
///
/// The output of this filter can be used in combination with vtkLODActor
/// to represent a levels-of-detail in the LOD hierarchy. Another use of
/// this class is to manually specify the planes, and then generate the
/// polyhedron from the planes (without squeezing the planes towards the
/// input). The method GenerateHull() is used to do this.
/// </remarks>
public class vtkHull : vtkPointSetAlgorithm
{
	/// <summary>
	/// Automatically generated type registration mechanics.
	/// </summary>
	public new const string MRFullTypeName = "Kitware.VTK.vtkHull";

	/// <summary>
	/// Automatically generated type registration mechanics.
	/// </summary>
	public new static readonly string MRClassNameKey;

	/// <summary>
	/// Automatically generated type registration mechanics.
	/// </summary>
	static vtkHull()
	{
		MRClassNameKey = "class vtkHull";
		Methods.RegisterType(Assembly.GetExecutingAssembly(), MRClassNameKey, Type.GetType("Kitware.VTK.vtkHull"));
	}

	/// <summary>
	/// Automatically generated constructor - called from generated code.
	/// DO NOT call directly.
	/// </summary>
	public vtkHull(IntPtr rawCppThis, bool callDisposalMethod, bool strong)
		: base(rawCppThis, callDisposalMethod, strong)
	{
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkHull_New(ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Standard methods to instantiate, obtain type information, and print
	/// information about the class.
	/// </summary>
	public new static vtkHull New()
	{
		vtkHull result = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkHull_New(ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			result = (vtkHull)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var _);
		}
		return result;
	}

	/// <summary>
	/// Standard methods to instantiate, obtain type information, and print
	/// information about the class.
	/// </summary>
	public vtkHull()
		: base(IntPtr.Zero, callDisposalMethod: false, strong: false)
	{
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr rawCppThis = vtkHull_New(ref mteStatus, ref mteIndex, ref rawRefCount);
		SetCppThis(rawCppThis, callDisposalMethod: true, (mteStatus != 0 && rawRefCount >= 2) ? true : false);
	}

	/// <summary>
	/// Automatically generated protected Dispose method - called from
	/// public Dispose or the C# destructor. DO NOT call directly.
	/// </summary>
	protected override void Dispose(bool disposing)
	{
		base.Dispose(disposing);
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkHull_AddCubeEdgePlanes_01(HandleRef pThis);

	/// <summary>
	/// Add the 12 planes that represent the edges of a cube - halfway between
	/// the two connecting face planes - (1,1,0), (-1,-1,0), (-1,1,0), (1,-1,0),
	/// (0,1,1), (0,-1,-1), (0,1,-1), (0,-1,1), (1,0,1), (-1,0,-1),
	/// (1,0,-1), (-1,0,1)
	/// </summary>
	public void AddCubeEdgePlanes()
	{
		vtkHull_AddCubeEdgePlanes_01(GetCppThis());
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkHull_AddCubeFacePlanes_02(HandleRef pThis);

	/// <summary>
	/// Add the six planes that make up the faces of a cube - (1,0,0),
	/// (-1, 0, 0), (0,1,0), (0,-1,0), (0,0,1), (0,0,-1)
	/// </summary>
	public void AddCubeFacePlanes()
	{
		vtkHull_AddCubeFacePlanes_02(GetCppThis());
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkHull_AddCubeVertexPlanes_03(HandleRef pThis);

	/// <summary>
	/// Add the 8 planes that represent the vertices of a cube - the combination
	/// of the three face planes connecting to a vertex - (1,1,1), (1,1,-1),
	/// (1,-1,1), (1,-1,1), (-1,1,1), (-1,1,-1), (-1,-1,1), (-1,-1-1).
	/// </summary>
	public void AddCubeVertexPlanes()
	{
		vtkHull_AddCubeVertexPlanes_03(GetCppThis());
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkHull_AddPlane_04(HandleRef pThis, double A, double B, double C);

	/// <summary>
	/// Add a plane to the current set of planes. It will be added at the
	/// end of the list, and an index that can later be used to set this
	/// plane's normal will be returned. The values A, B, C are from the
	/// plane equation Ax + By + Cz + D = 0. This vector does not have to
	/// have unit length (but it must have a non-zero length!). If a value
	/// 0 &gt; i &gt;= -NumberOfPlanes is returned, then the plane is parallel
	/// with a previously inserted plane, and |-i-1| is the index of the
	/// plane that was previously inserted. If a value i &lt; -NumberOfPlanes
	/// is returned, then the plane normal is zero length.
	/// </summary>
	public int AddPlane(double A, double B, double C)
	{
		return vtkHull_AddPlane_04(GetCppThis(), A, B, C);
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkHull_AddPlane_05(HandleRef pThis, IntPtr plane);

	/// <summary>
	/// Add a plane to the current set of planes. It will be added at the
	/// end of the list, and an index that can later be used to set this
	/// plane's normal will be returned. The values A, B, C are from the
	/// plane equation Ax + By + Cz + D = 0. This vector does not have to
	/// have unit length (but it must have a non-zero length!). If a value
	/// 0 &gt; i &gt;= -NumberOfPlanes is returned, then the plane is parallel
	/// with a previously inserted plane, and |-i-1| is the index of the
	/// plane that was previously inserted. If a value i &lt; -NumberOfPlanes
	/// is returned, then the plane normal is zero length.
	/// </summary>
	public int AddPlane(IntPtr plane)
	{
		return vtkHull_AddPlane_05(GetCppThis(), plane);
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkHull_AddPlane_06(HandleRef pThis, double A, double B, double C, double D);

	/// <summary>
	/// Variations of AddPlane()/SetPlane() that allow D to be set. These
	/// methods are used when GenerateHull() is used.
	/// </summary>
	public int AddPlane(double A, double B, double C, double D)
	{
		return vtkHull_AddPlane_06(GetCppThis(), A, B, C, D);
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkHull_AddPlane_07(HandleRef pThis, IntPtr plane, double D);

	/// <summary>
	/// Variations of AddPlane()/SetPlane() that allow D to be set. These
	/// methods are used when GenerateHull() is used.
	/// </summary>
	public int AddPlane(IntPtr plane, double D)
	{
		return vtkHull_AddPlane_07(GetCppThis(), plane, D);
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkHull_AddRecursiveSpherePlanes_08(HandleRef pThis, int level);

	/// <summary>
	/// Add the planes that represent the normals of the vertices of a
	/// polygonal sphere formed by recursively subdividing the triangles
	/// in an octahedron.  Each triangle is subdivided by connecting the
	/// midpoints of the edges thus forming 4 smaller triangles. The
	/// level indicates how many subdivisions to do with a level of 0
	/// used to add the 6 planes from the original octahedron, level 1
	/// will add 18 planes, and so on.
	/// </summary>
	public void AddRecursiveSpherePlanes(int level)
	{
		vtkHull_AddRecursiveSpherePlanes_08(GetCppThis(), level);
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkHull_GenerateHull_09(HandleRef pThis, HandleRef pd, IntPtr bounds);

	/// <summary>
	/// A special method that is used to generate a polyhedron directly
	/// from a set of n planes. The planes that are supplied by the user
	/// are not squeezed towards the input data (in fact the user need
	/// not specify an input). To use this method, you must provide an
	/// instance of vtkPolyData into which the points and cells defining
	/// the polyhedron are placed. You must also provide a bounding box
	/// where you expect the resulting polyhedron to lie. This can be
	/// a very generous fit, it's only used to create the initial polygons
	/// that are eventually clipped.
	/// </summary>
	public void GenerateHull(vtkPolyData pd, IntPtr bounds)
	{
		vtkHull_GenerateHull_09(GetCppThis(), pd?.GetCppThis() ?? default(HandleRef), bounds);
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkHull_GenerateHull_10(HandleRef pThis, HandleRef pd, double xmin, double xmax, double ymin, double ymax, double zmin, double zmax);

	/// <summary>
	/// A special method that is used to generate a polyhedron directly
	/// from a set of n planes. The planes that are supplied by the user
	/// are not squeezed towards the input data (in fact the user need
	/// not specify an input). To use this method, you must provide an
	/// instance of vtkPolyData into which the points and cells defining
	/// the polyhedron are placed. You must also provide a bounding box
	/// where you expect the resulting polyhedron to lie. This can be
	/// a very generous fit, it's only used to create the initial polygons
	/// that are eventually clipped.
	/// </summary>
	public void GenerateHull(vtkPolyData pd, double xmin, double xmax, double ymin, double ymax, double zmin, double zmax)
	{
		vtkHull_GenerateHull_10(GetCppThis(), pd?.GetCppThis() ?? default(HandleRef), xmin, xmax, ymin, ymax, zmin, zmax);
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern long vtkHull_GetNumberOfGenerationsFromBase_11(HandleRef pThis, string type);

	/// <summary>
	/// Standard methods to instantiate, obtain type information, and print
	/// information about the class.
	/// </summary>
	public override long GetNumberOfGenerationsFromBase(string type)
	{
		return vtkHull_GetNumberOfGenerationsFromBase_11(GetCppThis(), type);
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern long vtkHull_GetNumberOfGenerationsFromBaseType_12(string type);

	/// <summary>
	/// Standard methods to instantiate, obtain type information, and print
	/// information about the class.
	/// </summary>
	public new static long GetNumberOfGenerationsFromBaseType(string type)
	{
		return vtkHull_GetNumberOfGenerationsFromBaseType_12(type);
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkHull_GetNumberOfPlanes_13(HandleRef pThis);

	/// <summary>
	/// Get the number of planes in the current set of planes.
	/// </summary>
	public int GetNumberOfPlanes()
	{
		return vtkHull_GetNumberOfPlanes_13(GetCppThis());
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkHull_IsA_14(HandleRef pThis, string type);

	/// <summary>
	/// Standard methods to instantiate, obtain type information, and print
	/// information about the class.
	/// </summary>
	public override int IsA(string type)
	{
		return vtkHull_IsA_14(GetCppThis(), type);
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkHull_IsTypeOf_15(string type);

	/// <summary>
	/// Standard methods to instantiate, obtain type information, and print
	/// information about the class.
	/// </summary>
	public new static int IsTypeOf(string type)
	{
		return vtkHull_IsTypeOf_15(type);
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkHull_NewInstance_17(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Standard methods to instantiate, obtain type information, and print
	/// information about the class.
	/// </summary>
	public new vtkHull NewInstance()
	{
		vtkHull result = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkHull_NewInstance_17(GetCppThis(), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			result = (vtkHull)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var _);
		}
		return result;
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkHull_RemoveAllPlanes_18(HandleRef pThis);

	/// <summary>
	/// Remove all planes from the current set of planes.
	/// </summary>
	public void RemoveAllPlanes()
	{
		vtkHull_RemoveAllPlanes_18(GetCppThis());
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkHull_SafeDownCast_19(HandleRef o, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Standard methods to instantiate, obtain type information, and print
	/// information about the class.
	/// </summary>
	public new static vtkHull SafeDownCast(vtkObjectBase o)
	{
		vtkHull vtkHull2 = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkHull_SafeDownCast_19(o?.GetCppThis() ?? default(HandleRef), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			vtkHull2 = (vtkHull)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var found);
			if (found)
			{
				vtkHull2.Register(null);
			}
		}
		return vtkHull2;
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkHull_SetPlane_20(HandleRef pThis, int i, double A, double B, double C);

	/// <summary>
	/// Set the normal values for plane i. This is a plane that was already
	/// added to the current set of planes with AddPlane(), and is now being
	/// modified. The values A, B, C are from the plane equation
	/// Ax + By + Cz + D = 0. This vector does not have to have unit length.
	/// Note that D is set to zero, except in the case of the method taking
	/// a vtkPlanes* argument, where it is set to the D value defined there.
	/// </summary>
	public void SetPlane(int i, double A, double B, double C)
	{
		vtkHull_SetPlane_20(GetCppThis(), i, A, B, C);
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkHull_SetPlane_21(HandleRef pThis, int i, IntPtr plane);

	/// <summary>
	/// Set the normal values for plane i. This is a plane that was already
	/// added to the current set of planes with AddPlane(), and is now being
	/// modified. The values A, B, C are from the plane equation
	/// Ax + By + Cz + D = 0. This vector does not have to have unit length.
	/// Note that D is set to zero, except in the case of the method taking
	/// a vtkPlanes* argument, where it is set to the D value defined there.
	/// </summary>
	public void SetPlane(int i, IntPtr plane)
	{
		vtkHull_SetPlane_21(GetCppThis(), i, plane);
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkHull_SetPlane_22(HandleRef pThis, int i, double A, double B, double C, double D);

	/// <summary>
	/// Variations of AddPlane()/SetPlane() that allow D to be set. These
	/// methods are used when GenerateHull() is used.
	/// </summary>
	public void SetPlane(int i, double A, double B, double C, double D)
	{
		vtkHull_SetPlane_22(GetCppThis(), i, A, B, C, D);
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkHull_SetPlane_23(HandleRef pThis, int i, IntPtr plane, double D);

	/// <summary>
	/// Variations of AddPlane()/SetPlane() that allow D to be set. These
	/// methods are used when GenerateHull() is used.
	/// </summary>
	public void SetPlane(int i, IntPtr plane, double D)
	{
		vtkHull_SetPlane_23(GetCppThis(), i, plane, D);
	}

	[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkHull_SetPlanes_24(HandleRef pThis, HandleRef planes);

	/// <summary>
	/// Set all the planes at once using a vtkPlanes implicit function.
	/// This also sets the D value, so it can be used with GenerateHull().
	/// </summary>
	public void SetPlanes(vtkPlanes planes)
	{
		vtkHull_SetPlanes_24(GetCppThis(), planes?.GetCppThis() ?? default(HandleRef));
	}
}
