using System;
using System.Reflection;
using System.Runtime.InteropServices;
using Kitware.mummy.Runtime;

namespace Kitware.VTK;

/// <summary>
///    vtkPointHandleRepresentation2D
/// </summary>
/// <remarks>
///    represent the position of a point in display coordinates
///
/// This class is used to represent a vtkHandleWidget. It represents a
/// position in 2D world coordinates using a x-y cursor (the cursor defined by
/// an instance of vtkPolyData and generated by a vtkPolyDataAlgorithm).
///
/// </remarks>
/// <seealso>
///
/// vtkHandleRepresentation vtkHandleWidget
/// </seealso>
public class vtkPointHandleRepresentation2D : vtkHandleRepresentation
{
	/// <summary>
	/// Automatically generated type registration mechanics.
	/// </summary>
	public new const string MRFullTypeName = "Kitware.VTK.vtkPointHandleRepresentation2D";

	/// <summary>
	/// Automatically generated type registration mechanics.
	/// </summary>
	public new static readonly string MRClassNameKey;

	/// <summary>
	/// Automatically generated type registration mechanics.
	/// </summary>
	static vtkPointHandleRepresentation2D()
	{
		MRClassNameKey = "class vtkPointHandleRepresentation2D";
		Methods.RegisterType(Assembly.GetExecutingAssembly(), MRClassNameKey, Type.GetType("Kitware.VTK.vtkPointHandleRepresentation2D"));
	}

	/// <summary>
	/// Automatically generated constructor - called from generated code.
	/// DO NOT call directly.
	/// </summary>
	public vtkPointHandleRepresentation2D(IntPtr rawCppThis, bool callDisposalMethod, bool strong)
		: base(rawCppThis, callDisposalMethod, strong)
	{
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkPointHandleRepresentation2D_New(ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Instantiate this class.
	/// </summary>
	public new static vtkPointHandleRepresentation2D New()
	{
		vtkPointHandleRepresentation2D result = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkPointHandleRepresentation2D_New(ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			result = (vtkPointHandleRepresentation2D)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var _);
		}
		return result;
	}

	/// <summary>
	/// Instantiate this class.
	/// </summary>
	public vtkPointHandleRepresentation2D()
		: base(IntPtr.Zero, callDisposalMethod: false, strong: false)
	{
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr rawCppThis = vtkPointHandleRepresentation2D_New(ref mteStatus, ref mteIndex, ref rawRefCount);
		SetCppThis(rawCppThis, callDisposalMethod: true, (mteStatus != 0 && rawRefCount >= 2) ? true : false);
	}

	/// <summary>
	/// Automatically generated protected Dispose method - called from
	/// public Dispose or the C# destructor. DO NOT call directly.
	/// </summary>
	protected override void Dispose(bool disposing)
	{
		base.Dispose(disposing);
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkPointHandleRepresentation2D_BuildRepresentation_01(HandleRef pThis);

	/// <summary>
	/// Subclasses of vtkPointHandleRepresentation2D must implement these
	/// methods. These are the methods that the widget and its representation
	/// use to communicate with each other.
	/// </summary>
	public override void BuildRepresentation()
	{
		vtkPointHandleRepresentation2D_BuildRepresentation_01(GetCppThis());
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkPointHandleRepresentation2D_ComputeInteractionState_02(HandleRef pThis, int X, int Y, int modify);

	/// <summary>
	/// Subclasses of vtkPointHandleRepresentation2D must implement these
	/// methods. These are the methods that the widget and its representation
	/// use to communicate with each other.
	/// </summary>
	public override int ComputeInteractionState(int X, int Y, int modify)
	{
		return vtkPointHandleRepresentation2D_ComputeInteractionState_02(GetCppThis(), X, Y, modify);
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkPointHandleRepresentation2D_DeepCopy_03(HandleRef pThis, HandleRef prop);

	/// <summary>
	/// Methods to make this class behave as a vtkProp.
	/// </summary>
	public override void DeepCopy(vtkProp prop)
	{
		vtkPointHandleRepresentation2D_DeepCopy_03(GetCppThis(), prop?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkPointHandleRepresentation2D_GetActors2D_04(HandleRef pThis, HandleRef arg0);

	/// <summary>
	/// Methods to make this class behave as a vtkProp.
	/// </summary>
	public override void GetActors2D(vtkPropCollection arg0)
	{
		vtkPointHandleRepresentation2D_GetActors2D_04(GetCppThis(), arg0?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkPointHandleRepresentation2D_GetBounds_05(HandleRef pThis);

	/// <summary>
	/// Subclasses of vtkPointHandleRepresentation2D must implement these
	/// methods. These are the methods that the widget and its representation
	/// use to communicate with each other.
	/// </summary>
	public override double[] GetBounds()
	{
		IntPtr intPtr = vtkPointHandleRepresentation2D_GetBounds_05(GetCppThis());
		double[] array = null;
		if (IntPtr.Zero != intPtr)
		{
			array = new double[6];
			Marshal.Copy(intPtr, array, 0, array.Length);
		}
		return array;
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkPointHandleRepresentation2D_GetCursorShape_06(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Specify the cursor shape with an instance of vtkPolyData. Note that
	/// shape is assumed to be defined in the display coordinate system. By
	/// default a vtkCursor2D shape is used.
	/// </summary>
	public vtkPolyData GetCursorShape()
	{
		vtkPolyData vtkPolyData2 = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkPointHandleRepresentation2D_GetCursorShape_06(GetCppThis(), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			vtkPolyData2 = (vtkPolyData)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var found);
			if (found)
			{
				vtkPolyData2.Register(null);
			}
		}
		return vtkPolyData2;
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern long vtkPointHandleRepresentation2D_GetNumberOfGenerationsFromBase_07(HandleRef pThis, string type);

	/// <summary>
	/// Standard methods for instances of this class.
	/// </summary>
	public override long GetNumberOfGenerationsFromBase(string type)
	{
		return vtkPointHandleRepresentation2D_GetNumberOfGenerationsFromBase_07(GetCppThis(), type);
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern long vtkPointHandleRepresentation2D_GetNumberOfGenerationsFromBaseType_08(string type);

	/// <summary>
	/// Standard methods for instances of this class.
	/// </summary>
	public new static long GetNumberOfGenerationsFromBaseType(string type)
	{
		return vtkPointHandleRepresentation2D_GetNumberOfGenerationsFromBaseType_08(type);
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkPointHandleRepresentation2D_GetProperty_09(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Set/Get the handle properties when unselected and selected.
	/// </summary>
	public virtual vtkProperty2D GetProperty()
	{
		vtkProperty2D vtkProperty2D2 = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkPointHandleRepresentation2D_GetProperty_09(GetCppThis(), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			vtkProperty2D2 = (vtkProperty2D)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var found);
			if (found)
			{
				vtkProperty2D2.Register(null);
			}
		}
		return vtkProperty2D2;
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkPointHandleRepresentation2D_GetSelectedProperty_10(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Set/Get the handle properties when unselected and selected.
	/// </summary>
	public virtual vtkProperty2D GetSelectedProperty()
	{
		vtkProperty2D vtkProperty2D2 = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkPointHandleRepresentation2D_GetSelectedProperty_10(GetCppThis(), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			vtkProperty2D2 = (vtkProperty2D)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var found);
			if (found)
			{
				vtkProperty2D2.Register(null);
			}
		}
		return vtkProperty2D2;
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkPointHandleRepresentation2D_Highlight_11(HandleRef pThis, int highlight);

	/// <summary>
	/// Methods to make this class behave as a vtkProp.
	/// </summary>
	public override void Highlight(int highlight)
	{
		vtkPointHandleRepresentation2D_Highlight_11(GetCppThis(), highlight);
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkPointHandleRepresentation2D_IsA_12(HandleRef pThis, string type);

	/// <summary>
	/// Standard methods for instances of this class.
	/// </summary>
	public override int IsA(string type)
	{
		return vtkPointHandleRepresentation2D_IsA_12(GetCppThis(), type);
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkPointHandleRepresentation2D_IsTypeOf_13(string type);

	/// <summary>
	/// Standard methods for instances of this class.
	/// </summary>
	public new static int IsTypeOf(string type)
	{
		return vtkPointHandleRepresentation2D_IsTypeOf_13(type);
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkPointHandleRepresentation2D_NewInstance_15(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Standard methods for instances of this class.
	/// </summary>
	public new vtkPointHandleRepresentation2D NewInstance()
	{
		vtkPointHandleRepresentation2D result = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkPointHandleRepresentation2D_NewInstance_15(GetCppThis(), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			result = (vtkPointHandleRepresentation2D)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var _);
		}
		return result;
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkPointHandleRepresentation2D_ReleaseGraphicsResources_16(HandleRef pThis, HandleRef arg0);

	/// <summary>
	/// Methods to make this class behave as a vtkProp.
	/// </summary>
	public override void ReleaseGraphicsResources(vtkWindow arg0)
	{
		vtkPointHandleRepresentation2D_ReleaseGraphicsResources_16(GetCppThis(), arg0?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkPointHandleRepresentation2D_RenderOverlay_17(HandleRef pThis, HandleRef viewport);

	/// <summary>
	/// Methods to make this class behave as a vtkProp.
	/// </summary>
	public override int RenderOverlay(vtkViewport viewport)
	{
		return vtkPointHandleRepresentation2D_RenderOverlay_17(GetCppThis(), viewport?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkPointHandleRepresentation2D_SafeDownCast_18(HandleRef o, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Standard methods for instances of this class.
	/// </summary>
	public new static vtkPointHandleRepresentation2D SafeDownCast(vtkObjectBase o)
	{
		vtkPointHandleRepresentation2D vtkPointHandleRepresentation2D2 = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkPointHandleRepresentation2D_SafeDownCast_18(o?.GetCppThis() ?? default(HandleRef), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			vtkPointHandleRepresentation2D2 = (vtkPointHandleRepresentation2D)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var found);
			if (found)
			{
				vtkPointHandleRepresentation2D2.Register(null);
			}
		}
		return vtkPointHandleRepresentation2D2;
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkPointHandleRepresentation2D_SetCursorShape_19(HandleRef pThis, HandleRef cursorShape);

	/// <summary>
	/// Specify the cursor shape with an instance of vtkPolyData. Note that
	/// shape is assumed to be defined in the display coordinate system. By
	/// default a vtkCursor2D shape is used.
	/// </summary>
	public void SetCursorShape(vtkPolyData cursorShape)
	{
		vtkPointHandleRepresentation2D_SetCursorShape_19(GetCppThis(), cursorShape?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkPointHandleRepresentation2D_SetDisplayPosition_20(HandleRef pThis, IntPtr xyz);

	/// <summary>
	/// Set/Get the position of the point in display coordinates.  This overloads
	/// the superclasses SetDisplayPosition in order to set the focal point
	/// of the cursor.
	/// </summary>
	public override void SetDisplayPosition(IntPtr xyz)
	{
		vtkPointHandleRepresentation2D_SetDisplayPosition_20(GetCppThis(), xyz);
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkPointHandleRepresentation2D_SetPointPlacer_21(HandleRef pThis, HandleRef arg0);

	/// <summary>
	/// Override the superclass implementation. This class does not use a
	/// point placer. Point placers dictate the placement of points in 3D
	/// space. Since this class constrains points to lie in an overlay
	/// plane anyway, we don't care. Just returns.
	/// </summary>
	public override void SetPointPlacer(vtkPointPlacer arg0)
	{
		vtkPointHandleRepresentation2D_SetPointPlacer_21(GetCppThis(), arg0?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkPointHandleRepresentation2D_SetProperty_22(HandleRef pThis, HandleRef arg0);

	/// <summary>
	/// Set/Get the handle properties when unselected and selected.
	/// </summary>
	public void SetProperty(vtkProperty2D arg0)
	{
		vtkPointHandleRepresentation2D_SetProperty_22(GetCppThis(), arg0?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkPointHandleRepresentation2D_SetSelectedProperty_23(HandleRef pThis, HandleRef arg0);

	/// <summary>
	/// Set/Get the handle properties when unselected and selected.
	/// </summary>
	public void SetSelectedProperty(vtkProperty2D arg0)
	{
		vtkPointHandleRepresentation2D_SetSelectedProperty_23(GetCppThis(), arg0?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkPointHandleRepresentation2D_SetVisibility_24(HandleRef pThis, int visible);

	/// <summary>
	/// Override to ensure that the internal actor's visibility is consistent with
	/// this representation's visibility. Inconsistency between the two would cause
	/// issues in picking logic which relies on individual view prop visibility to
	/// determine whether the prop is pickable.
	/// </summary>
	public override void SetVisibility(int visible)
	{
		vtkPointHandleRepresentation2D_SetVisibility_24(GetCppThis(), visible);
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkPointHandleRepresentation2D_ShallowCopy_25(HandleRef pThis, HandleRef prop);

	/// <summary>
	/// Methods to make this class behave as a vtkProp.
	/// </summary>
	public override void ShallowCopy(vtkProp prop)
	{
		vtkPointHandleRepresentation2D_ShallowCopy_25(GetCppThis(), prop?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkPointHandleRepresentation2D_StartWidgetInteraction_26(HandleRef pThis, IntPtr eventPos);

	/// <summary>
	/// Subclasses of vtkPointHandleRepresentation2D must implement these
	/// methods. These are the methods that the widget and its representation
	/// use to communicate with each other.
	/// </summary>
	public override void StartWidgetInteraction(IntPtr eventPos)
	{
		vtkPointHandleRepresentation2D_StartWidgetInteraction_26(GetCppThis(), eventPos);
	}

	[DllImport("Kitware.VTK.InteractionWidgets.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkPointHandleRepresentation2D_WidgetInteraction_27(HandleRef pThis, IntPtr eventPos);

	/// <summary>
	/// Subclasses of vtkPointHandleRepresentation2D must implement these
	/// methods. These are the methods that the widget and its representation
	/// use to communicate with each other.
	/// </summary>
	public override void WidgetInteraction(IntPtr eventPos)
	{
		vtkPointHandleRepresentation2D_WidgetInteraction_27(GetCppThis(), eventPos);
	}
}
