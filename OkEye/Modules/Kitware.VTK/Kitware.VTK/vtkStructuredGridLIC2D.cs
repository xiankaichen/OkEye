using System;
using System.Reflection;
using System.Runtime.InteropServices;
using Kitware.mummy.Runtime;

namespace Kitware.VTK;

/// <summary>
///    vtkStructuredGridLIC2D
///
/// GPU implementation of a Line Integral Convolution, a technique for
/// imaging vector fields.
///
/// The input on port 0 is an 2D vtkStructuredGrid. It needs
/// a vector field on point data.
/// Port 1 is a special port for customized noise input. It is an optional port.
/// If not present, noise is generated by the filter. Even if none-power-of-two
/// texture are supported, giving a power-of-two image may result in faster
/// execution on the GPU.
///
/// Please refer to Forssell, L. K., "Visualizing flow over curvilinear grid
/// surfaces using line integral convolution", Visualization 94 Conference
/// Proceedings, pages 240-247, IEEE Computer Society, 1994 for details of the
/// algorithm.
///
/// @par Required OpenGL Extensions:
/// GL_ARB_texture_non_power_of_two
/// GL_VERSION_2_0
/// GL_ARB_texture_float
/// GL_ARB_draw_buffers
/// GL_EXT_framebuffer_object
/// GL_ARB_pixel_buffer_object
/// </summary>
public class vtkStructuredGridLIC2D : vtkStructuredGridAlgorithm
{
	/// <summary>
	/// Automatically generated type registration mechanics.
	/// </summary>
	public new const string MRFullTypeName = "Kitware.VTK.vtkStructuredGridLIC2D";

	/// <summary>
	/// Automatically generated type registration mechanics.
	/// </summary>
	public new static readonly string MRClassNameKey;

	/// <summary>
	/// Automatically generated type registration mechanics.
	/// </summary>
	static vtkStructuredGridLIC2D()
	{
		MRClassNameKey = "class vtkStructuredGridLIC2D";
		Methods.RegisterType(Assembly.GetExecutingAssembly(), MRClassNameKey, Type.GetType("Kitware.VTK.vtkStructuredGridLIC2D"));
	}

	/// <summary>
	/// Automatically generated constructor - called from generated code.
	/// DO NOT call directly.
	/// </summary>
	public vtkStructuredGridLIC2D(IntPtr rawCppThis, bool callDisposalMethod, bool strong)
		: base(rawCppThis, callDisposalMethod, strong)
	{
	}

	[DllImport("Kitware.VTK.RenderingLICOpenGL2.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkStructuredGridLIC2D_New(ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public new static vtkStructuredGridLIC2D New()
	{
		vtkStructuredGridLIC2D result = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkStructuredGridLIC2D_New(ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			result = (vtkStructuredGridLIC2D)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var _);
		}
		return result;
	}

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public vtkStructuredGridLIC2D()
		: base(IntPtr.Zero, callDisposalMethod: false, strong: false)
	{
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr rawCppThis = vtkStructuredGridLIC2D_New(ref mteStatus, ref mteIndex, ref rawRefCount);
		SetCppThis(rawCppThis, callDisposalMethod: true, (mteStatus != 0 && rawRefCount >= 2) ? true : false);
	}

	/// <summary>
	/// Automatically generated protected Dispose method - called from
	/// public Dispose or the C# destructor. DO NOT call directly.
	/// </summary>
	protected override void Dispose(bool disposing)
	{
		base.Dispose(disposing);
	}

	[DllImport("Kitware.VTK.RenderingLICOpenGL2.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkStructuredGridLIC2D_GetContext_01(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	/// Get/Set the context. Context must be a vtkOpenGLRenderWindow.
	/// This does not increase the reference count of the
	/// context to avoid reference loops.
	/// SetContext() may raise an error if the OpenGL context does not support the
	/// required OpenGL extensions. Return 0 upon failure and 1 upon success.
	/// </summary>
	public vtkRenderWindow GetContext()
	{
		vtkRenderWindow vtkRenderWindow2 = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkStructuredGridLIC2D_GetContext_01(GetCppThis(), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			vtkRenderWindow2 = (vtkRenderWindow)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var found);
			if (found)
			{
				vtkRenderWindow2.Register(null);
			}
		}
		return vtkRenderWindow2;
	}

	[DllImport("Kitware.VTK.RenderingLICOpenGL2.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkStructuredGridLIC2D_GetFBOSuccess_02(HandleRef pThis);

	/// <summary>
	/// Check if FBO is started properly.
	/// </summary>
	public int GetFBOSuccess()
	{
		return vtkStructuredGridLIC2D_GetFBOSuccess_02(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingLICOpenGL2.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkStructuredGridLIC2D_GetLICSuccess_03(HandleRef pThis);

	/// <summary>
	/// Check if LIC runs properly.
	/// </summary>
	public int GetLICSuccess()
	{
		return vtkStructuredGridLIC2D_GetLICSuccess_03(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingLICOpenGL2.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkStructuredGridLIC2D_GetMagnification_04(HandleRef pThis);

	/// <summary>
	/// The magnification factor. Default is 1
	/// </summary>
	public virtual int GetMagnification()
	{
		return vtkStructuredGridLIC2D_GetMagnification_04(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingLICOpenGL2.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkStructuredGridLIC2D_GetMagnificationMaxValue_05(HandleRef pThis);

	/// <summary>
	/// The magnification factor. Default is 1
	/// </summary>
	public virtual int GetMagnificationMaxValue()
	{
		return vtkStructuredGridLIC2D_GetMagnificationMaxValue_05(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingLICOpenGL2.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkStructuredGridLIC2D_GetMagnificationMinValue_06(HandleRef pThis);

	/// <summary>
	/// The magnification factor. Default is 1
	/// </summary>
	public virtual int GetMagnificationMinValue()
	{
		return vtkStructuredGridLIC2D_GetMagnificationMinValue_06(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingLICOpenGL2.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern long vtkStructuredGridLIC2D_GetNumberOfGenerationsFromBase_07(HandleRef pThis, string type);

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public override long GetNumberOfGenerationsFromBase(string type)
	{
		return vtkStructuredGridLIC2D_GetNumberOfGenerationsFromBase_07(GetCppThis(), type);
	}

	[DllImport("Kitware.VTK.RenderingLICOpenGL2.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern long vtkStructuredGridLIC2D_GetNumberOfGenerationsFromBaseType_08(string type);

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public new static long GetNumberOfGenerationsFromBaseType(string type)
	{
		return vtkStructuredGridLIC2D_GetNumberOfGenerationsFromBaseType_08(type);
	}

	[DllImport("Kitware.VTK.RenderingLICOpenGL2.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern double vtkStructuredGridLIC2D_GetStepSize_09(HandleRef pThis);

	/// <summary>
	/// Step size.
	/// WE ARE NOT SURE YET about the space where we define the step.
	/// If the image data has different spacing in each dimension, it
	/// is an issue.
	/// Initial value is 1.0.
	/// class invariant: StepSize&gt;0.0.
	/// In term of visual quality, the smaller the better.
	/// The type for the interface is double as VTK interface is double
	/// but GPU only supports float. This value will be converted to
	/// float in the execution of the algorithm.
	/// </summary>
	public virtual double GetStepSize()
	{
		return vtkStructuredGridLIC2D_GetStepSize_09(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingLICOpenGL2.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkStructuredGridLIC2D_GetSteps_10(HandleRef pThis);

	/// <summary>
	/// Number of steps. Initial value is 1.
	/// class invariant: Steps&gt;0.
	/// In term of visual quality, the greater the better.
	/// </summary>
	public virtual int GetSteps()
	{
		return vtkStructuredGridLIC2D_GetSteps_10(GetCppThis());
	}

	[DllImport("Kitware.VTK.RenderingLICOpenGL2.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkStructuredGridLIC2D_IsA_11(HandleRef pThis, string type);

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public override int IsA(string type)
	{
		return vtkStructuredGridLIC2D_IsA_11(GetCppThis(), type);
	}

	[DllImport("Kitware.VTK.RenderingLICOpenGL2.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkStructuredGridLIC2D_IsTypeOf_12(string type);

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public new static int IsTypeOf(string type)
	{
		return vtkStructuredGridLIC2D_IsTypeOf_12(type);
	}

	[DllImport("Kitware.VTK.RenderingLICOpenGL2.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkStructuredGridLIC2D_NewInstance_14(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public new vtkStructuredGridLIC2D NewInstance()
	{
		vtkStructuredGridLIC2D result = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkStructuredGridLIC2D_NewInstance_14(GetCppThis(), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			result = (vtkStructuredGridLIC2D)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var _);
		}
		return result;
	}

	[DllImport("Kitware.VTK.RenderingLICOpenGL2.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr vtkStructuredGridLIC2D_SafeDownCast_15(HandleRef o, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

	/// <summary>
	///             Undocumented Block
	/// </summary>
	public new static vtkStructuredGridLIC2D SafeDownCast(vtkObjectBase o)
	{
		vtkStructuredGridLIC2D vtkStructuredGridLIC2D2 = null;
		uint mteStatus = 0u;
		uint mteIndex = uint.MaxValue;
		uint rawRefCount = 0u;
		IntPtr intPtr = vtkStructuredGridLIC2D_SafeDownCast_15(o?.GetCppThis() ?? default(HandleRef), ref mteStatus, ref mteIndex, ref rawRefCount);
		if (IntPtr.Zero != intPtr)
		{
			vtkStructuredGridLIC2D2 = (vtkStructuredGridLIC2D)Methods.CreateWrappedObject(mteStatus, mteIndex, rawRefCount, intPtr, callDisposalMethod: true, out var found);
			if (found)
			{
				vtkStructuredGridLIC2D2.Register(null);
			}
		}
		return vtkStructuredGridLIC2D2;
	}

	[DllImport("Kitware.VTK.RenderingLICOpenGL2.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern int vtkStructuredGridLIC2D_SetContext_16(HandleRef pThis, HandleRef context);

	/// <summary>
	/// Get/Set the context. Context must be a vtkOpenGLRenderWindow.
	/// This does not increase the reference count of the
	/// context to avoid reference loops.
	/// SetContext() may raise an error if the OpenGL context does not support the
	/// required OpenGL extensions. Return 0 upon failure and 1 upon success.
	/// </summary>
	public int SetContext(vtkRenderWindow context)
	{
		return vtkStructuredGridLIC2D_SetContext_16(GetCppThis(), context?.GetCppThis() ?? default(HandleRef));
	}

	[DllImport("Kitware.VTK.RenderingLICOpenGL2.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkStructuredGridLIC2D_SetMagnification_17(HandleRef pThis, int _arg);

	/// <summary>
	/// The magnification factor. Default is 1
	/// </summary>
	public virtual void SetMagnification(int _arg)
	{
		vtkStructuredGridLIC2D_SetMagnification_17(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingLICOpenGL2.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkStructuredGridLIC2D_SetStepSize_18(HandleRef pThis, double _arg);

	/// <summary>
	/// Step size.
	/// WE ARE NOT SURE YET about the space where we define the step.
	/// If the image data has different spacing in each dimension, it
	/// is an issue.
	/// Initial value is 1.0.
	/// class invariant: StepSize&gt;0.0.
	/// In term of visual quality, the smaller the better.
	/// The type for the interface is double as VTK interface is double
	/// but GPU only supports float. This value will be converted to
	/// float in the execution of the algorithm.
	/// </summary>
	public virtual void SetStepSize(double _arg)
	{
		vtkStructuredGridLIC2D_SetStepSize_18(GetCppThis(), _arg);
	}

	[DllImport("Kitware.VTK.RenderingLICOpenGL2.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
	internal static extern void vtkStructuredGridLIC2D_SetSteps_19(HandleRef pThis, int _arg);

	/// <summary>
	/// Number of steps. Initial value is 1.
	/// class invariant: Steps&gt;0.
	/// In term of visual quality, the greater the better.
	/// </summary>
	public virtual void SetSteps(int _arg)
	{
		vtkStructuredGridLIC2D_SetSteps_19(GetCppThis(), _arg);
	}
}
